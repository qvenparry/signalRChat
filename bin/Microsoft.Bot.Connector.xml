<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bot.Connector</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Bot.Connector.Attachments">
            <summary>
            Attachments operations.
            </summary>
            <summary>
            Addition helper code for Attachments
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.#ctor(Microsoft.Bot.Connector.ConnectorClient)">
            <summary>
            Initializes a new instance of the Attachments class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachments.Client">
            <summary>
            Gets a reference to the ConnectorClient
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentInfoWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachmentInfo
            </summary>
            <remarks>
            Get AttachmentInfo structure describing the attachment views
            </remarks>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachment
            </summary>
            <remarks>
            Get the named view as binary content
            </remarks>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="F:Microsoft.Bot.Connector.Attachments._httpClient">
            <summary>
            The attachment code uses this client. Ideally, this would be passed in or set via a DI system to 
            allow developer control over behavior / headers / timesouts and such. Unfortunatly this is buried
            pretty deep, the static solution used here is much cleaner. If this becomes an issue we could
            consider circling back and exposing developer control over this HttpClient. 
            </summary>
            <remarks>
            Relativly few bots use attachments, so rather than paying the startup cost, this is
            a <see cref="T:System.Lazy`1"/> simply to avoid paying a static initialization penalty for every bot. 
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentUri(System.String,System.String)">
            <summary>
            Get the URI of an attachment view
            </summary>
            <param name="attachmentId"></param>
            <param name="viewId">default is "original"</param>
            <returns>uri</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentStreamAsync(System.String,System.String)">
            <summary>
            Get the given attachmentid view as a stream
            </summary>
            <param name="attachmentId">attachmentid</param>
            <param name="viewId">view to get (default:original)</param>
            <returns>stream of attachment</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.AttachmentsExtensions">
            <summary>
            Extension methods for Attachments.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentInfoAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.Threading.CancellationToken)">
            <summary>
            GetAttachmentInfo
            </summary>
            <remarks>
            Get AttachmentInfo structure describing the attachment views
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            GetAttachment
            </summary>
            <remarks>
            Get the named view as binary content
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.AuthenticationConstants">
            <summary>
            Values and Constants used for Authentication and Authrization by the Bot Framework Protocol.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToChannelFromBotLoginUrl">
            <summary>
            TO CHANNEL FROM BOT: Login URL
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToChannelFromBotOAuthScope">
            <summary>
            TO CHANNEL FROM BOT: OAuth scope to request
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToBotFromChannelTokenIssuer">
            <summary>
            TO BOT FROM CHANNEL: Token issuer
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.OAuthUrl">
            <summary>
            OAuth Url used to get a token from OAuthApiClient
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.BotOpenIdMetadataKey">
            <summary>
            Application Setting Key for the OpenIdMetadataUrl value
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.OAuthUrlKey">
            <summary>
            Application Setting Key for the OAuthUrl value
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.EmulateOAuthCardsKey">
            <summary>
            Application Settings Key for whether to emulate OAuthCards when using the emulator
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToBotFromChannelOpenIdMetadataUrl">
            <summary>
            TO BOT FROM CHANNEL: OpenID metadata document for tokens coming from MSA
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToBotFromEmulatorOpenIdMetadataUrl">
            <summary>
            TO BOT FROM EMULATOR: OpenID metadata document for tokens coming from MSA
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToBotFromEnterpriseChannelOpenIdMetadataUrlFormat">
            <summary>
            TO BOT FROM ENTERPRISE CHANNEL: OpenID metadata document for tokens coming from MSA
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AllowedSigningAlgorithms">
            <summary>
            Allowed token signing algorithms. Tokens come from channels to the bot. The code
            that uses this also supports tokens coming from the emulator.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AuthorizedParty">
            <summary>
            "azp" Claim. 
            Authorized party - the party to which the ID Token was issued. 
            This claim follows the general format set forth in the OpenID Spec.         
                http://openid.net/specs/openid-connect-core-1_0.html#IDToken      
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AudienceClaim">
            <summary>
            Audience Claim. From RFC 7519. 
                https://tools.ietf.org/html/rfc7519#section-4.1.3
            The "aud" (audience) claim identifies the recipients that the JWT is
            intended for. Each principal intended to process the JWT MUST
            identify itself with a value in the audience claim. If the principal
            processing the claim does not identify itself with a value in the
            "aud" claim when this claim is present, then the JWT MUST be
            rejected. In the general case, the "aud" value is an array of case-
            sensitive strings, each containing a StringOrURI value. In the
            special case when the JWT has one audience, the "aud" value MAY be a
            single case-sensitive string containing a StringOrURI value. The
            interpretation of audience values is generally application specific.
            Use of this claim is OPTIONAL.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.KeyIdHeader">
            <summary>
            From RFC 7515
                https://tools.ietf.org/html/rfc7515#section-4.1.4
            The "kid" (key ID) Header Parameter is a hint indicating which key
            was used to secure the JWS. This parameter allows originators to
            explicitly signal a change of key to recipients. The structure of
            the "kid" value is unspecified. Its value MUST be a case-sensitive
            string. Use of this Header Parameter is OPTIONAL.
            When used with a JWK, the "kid" value is used to match a JWK "kid"
            parameter value.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.VersionClaim">
            <summary>
            Token version claim name. As used in Microsoft AAD tokens.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AppIdClaim">
            <summary>
            App ID claim name. As used in Microsoft AAD 1.0 tokens.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ServiceUrlClaim">
            <summary>
            Service URL claim name. As used in Microsoft Bot Framework v3.1 auth.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.ChannelValidation.OpenIdMetadataUrl">
            <summary>
            The default endpoint that is used for Open ID Metadata requests.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.ChannelValidation.ToBotFromChannelTokenValidationParameters">
            <summary>
            TO BOT FROM CHANNEL: Token validation parameters when connecting to a bot
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ChannelValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,System.Net.Http.HttpClient,System.String)">
            <summary>
            Validate the incoming Auth Header as a token sent from the Bot Framework Service.
            </summary>
            <remarks>
            A token issued by the Bot Framework emulator will FAIL this check.
            </remarks>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]"</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <returns>
            A valid ClaimsIdentity.
            </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ChannelValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,System.String,System.Net.Http.HttpClient,System.String)">
            <summary>
            Validate the incoming Auth Header as a token sent from the Bot Framework Service.
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]"</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="serviceUrl"></param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.EmulatorValidation">
            <summary>
            Validates and Examines JWT tokens from the Bot Framework Emulator
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.EmulatorValidation.ToBotFromEmulatorTokenValidationParameters">
            <summary>
            TO BOT FROM EMULATOR: Token validation parameters when connecting to a channel.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EmulatorValidation.IsTokenFromEmulator(System.String)">
            <summary>
            Determines if a given Auth header is from the Bot Framework Emulator
            </summary>
            <param name="authHeader">Bearer Token, in the "Bearer [Long String]" Format.</param>
            <returns>True, if the token was issued by the Emulator. Otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EmulatorValidation.AuthenticateEmulatorToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.Net.Http.HttpClient,System.String)">
            <summary>
            Validate the incoming Auth Header as a token sent from the Bot Framework Emulator.         
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]"</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="channelProvider">The channelService value that distinguishes public Azure from US Government Azure.</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to 
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <returns>
            A valid ClaimsIdentity. 
            </returns>
            <remarks>
            A token issued by the Bot Framework will FAIL this check. Only Emulator tokens will pass.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.EndorsementsRetriever">
            <summary>
            The endorsements property within each key contains one or more endorsement 
            strings which you can use to verify that the channel ID specified in the channelId 
            property within the Activity object of the incoming request is authentic.
            More details at:
                https://docs.microsoft.com/en-us/bot-framework/rest-api/bot-framework-rest-connector-authentication
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EndorsementsRetriever.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Creates an instance of the Endorsements Retriever class. 
            </summary>
            <param name="httpClient">Allow the calling layer to manage the lifetime of the HttpClient, complete with
            timeouts, pooling, instancing and so on. This is to avoid having to Use/Dispose a new instance
            of the client on each call, which may be very expensive in terms of latency, TLS connections
            and related issues.</param>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.EndorsementsRetriever.JsonWebKeySetUri">
            <summary>
            JSON Web Key Set Metadata value
            From the OpenID Spec at 
                https://openid.net/specs/openid-connect-discovery-1_0.html
                URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) 
                the RP uses to validate signatures from the OP. The JWK Set MAY also contain the 
                Server's encryption key(s), which are used by RPs to encrypt requests to the 
                Server. When both signing and encryption keys are made available, a use (Key Use) 
                parameter value is REQUIRED for all keys in the referenced JWK Set to indicate 
                each key's intended usage. Although some algorithms allow the same key to be 
                used for both signatures and encryption, doing so is NOT RECOMMENDED, as it 
                is less secure. The JWK x5c parameter MAY be used to provide X.509 representations 
                of keys provided. When used, the bare key values MUST still be present and MUST 
                match those in the certificate.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EndorsementsRetriever.GetConfigurationAsync(System.String,Microsoft.IdentityModel.Protocols.IDocumentRetriever,System.Threading.CancellationToken)">
            <summary>
            Retrieves a populated configuration given an address and a document retriever.
            </summary>
            <param name="address">Address of the discovery document.</param>
            <param name="retriever">The document retriever to use to read the discovery document.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            a populated configuration.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EndorsementsRetriever.GetDocumentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Obtains a document from an address.
            </summary>
            <param name="address">location of document.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            the document as a string.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.EndorsementsValidator">
            <summary>
            Contains helper methods for verifying JWT endorsements.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EndorsementsValidator.Validate(System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Verify that a channel matches the endorsements found on the JWT token.
            For example, if an <see cref="T:Microsoft.Bot.Schema.Activity"/> comes from WebChat, that activity's
            <see cref="P:Microsoft.Bot.Schema.Activity.ChannelId"/> property is set to "webchat" and the signing party
            of the JWT token must have a corresponding endorsement of “Webchat”.
            </summary>
            <param name="channelId">The ID of the channel to validate, typically extracted from the activity's
            <see cref="P:Microsoft.Bot.Schema.Activity.ChannelId"/> property, that to which the Activity is affinitized.</param>
            <param name="endorsements">The JWT token’s signing party is permitted to send activities only for
            specific channels. That list, the set of channels the service can sign for, is called the the endorsement list.
            The activity’s <see cref="P:Microsoft.Bot.Schema.Activity.ChannelId"/> MUST be found in the endorsement list, or the incoming 
            activity is not considered valid.</param>
            <returns>True if the channel ID is found in the endorsements list; otherwise, false.</returns>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.EnterpriseChannelValidation.ToBotFromEnterpriseChannelTokenValidationParameters">
            <summary>
            TO BOT FROM ENTERPRISE CHANNEL: Token validation parameters when connecting to a bot
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EnterpriseChannelValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.String,System.Net.Http.HttpClient,System.String)">
            <summary>
            Validate the incoming Auth Header as a token sent from a Bot Framework Channel Service.
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]"</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="channelProvider">The user defined configuration for the channel.</param>
            <param name="serviceUrl">The service url from the request</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants">
            <summary>
            Values and Constants used for Authentication and Authrization by the Bot Framework Protocol to US Government DataCenters
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ChannelService">
            <summary>
            Government Channel Service property value
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToChannelFromBotLoginUrl">
            <summary>
            TO GOVERNMENT CHANNEL FROM BOT: Login URL
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToChannelFromBotOAuthScope">
            <summary>
            TO GOVERNMENT CHANNEL FROM BOT: OAuth scope to request
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToBotFromChannelTokenIssuer">
            <summary>
            TO BOT FROM GOVERNMENT CHANNEL: Token issuer
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.OAuthUrlGov">
            <summary>
            OAuth Url used to get a token from OAuthApiClient
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToBotFromChannelOpenIdMetadataUrl">
            <summary>
            TO BOT FROM GOVERNMANT CHANNEL: OpenID metadata document for tokens coming from MSA
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToBotFromEmulatorOpenIdMetadataUrl">
            <summary>
            TO BOT FROM GOVERNMENT EMULATOR: OpenID metadata document for tokens coming from MSA
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation.ToBotFromGovernmentChannelTokenValidationParameters">
            <summary>
            TO BOT FROM GOVERNMENT CHANNEL: Token validation parameters when connecting to a bot
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,System.String,System.Net.Http.HttpClient,System.String)">
            <summary>
            Validate the incoming Auth Header as a token sent from a Bot Framework Government Channel Service.
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]"</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="serviceUrl">The service url from the request</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation.ValidateIdentity(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Connector.Authentication.ICredentialProvider,System.String)">
            <summary>
            Validate the ClaimsIdentity as sent from a Bot Framework Government Channel Service.
            </summary>
            <param name="identity">The claims identity to validate.</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="serviceUrl">The service url from the request</param>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.IChannelProvider">
            <summary>
            ChannelProvider interface. This interface allows Bots to provide their own
            implementation for the configuration parameters to connect to a Bot 
            Framework channel service
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.IChannelProvider.GetChannelServiceAsync">
            <summary>
            Gets the channel service property for this channel provider
            </summary>
            <returns>The channel service property for the channel provider</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.IChannelProvider.IsGovernment">
            <summary>
            Gets a value of whether this provider represents a channel on Governmant Azure
            </summary>
            <returns>True if this channel provider represents a channel on Government Azure</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.IChannelProvider.IsPublicAzure">
            <summary>
            Gets a value of whether this provider represents a channel on Public Azure
            </summary>
            <returns>True if this channel provider represents a channel on Public Azure</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.ICredentialProvider">
            <summary>
            CredentialProvider interface. This interface allows Bots to provide their own
            implementation of what is, and what is not, a valid appId and password. This is 
            useful in the case of multi-tenant bots, where the bot may need to call
            out to a service to determine if a particular appid/password pair
            is valid. 
            
            For Single Tenant bots (the vast majority) the simple static providers 
            are sufficient. 
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ICredentialProvider.IsValidAppIdAsync(System.String)">
            <summary>
            Validates an app ID.
            </summary>
            <param name="appId">The app ID to validate.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result is true if <paramref name="appId"/>
            is valid for the controller; otherwise, false.
            <para>
            This method is async to enable custom implementations
            that may need to call out to serviced to validate the appId / password pair.
            </para></remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ICredentialProvider.GetAppPasswordAsync(System.String)">
            <summary>
            Gets the app password for a given bot app ID.
            </summary>
            <param name="appId">The ID of the app to get the password for.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful and the app ID is valid, the result
            contains the password; otherwise, null.
            <para>
            This method is async to enable custom implementations
            that may need to call out to serviced to validate the appId / password pair.
            </para></remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ICredentialProvider.IsAuthenticationDisabledAsync">
            <summary>
            Checks whether bot authentication is disabled.
            </summary>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful and bot authentication is disabled, the result
            is true; otherwise, false.
            <para>
            This method is async to enable custom implementations
            that may need to call out to serviced to validate the appId / password pair.
            </para></remarks>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor._openIdMetadataCache">
            <summary>
            Cache for OpenIdConnect configuration managers (one per metadata URL)
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor._endorsementsCache">
            <summary>
            Cache for Endorsement configuration managers (one per metadata URL)
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor._tokenValidationParameters">
            <summary>
            Token validation parameters for this instance
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor._openIdMetadata">
            <summary>
            OpenIdConnect configuration manager for this instance
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor._endorsementsData">
            <summary>
            Endorsements configuration manager for this instance
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor._allowedSigningAlgorithms">
            <summary>
            Allowed signing algorithms
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor.#ctor(System.Net.Http.HttpClient,Microsoft.IdentityModel.Tokens.TokenValidationParameters,System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Extracts relevant data from JWT Tokens
            </summary>
            <param name="httpClient">As part of validating JWT Tokens, endorsements need to be feteched from
            sources specified by the relevant security URLs. This HttpClient is used to allow for resource
            pooling around those retrievals. As those resources require TLS sharing the HttpClient is 
            important to overall perfomance.</param>
            <param name="tokenValidationParameters"></param>
            <param name="metadataUrl"></param>
            <param name="allowedSigningAlgorithms"></param>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.JwtTokenValidation">
            <summary>
            Contains helper methods for authenticating incoming HTTP requests.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenValidation.AuthenticateRequest(Microsoft.Bot.Schema.IActivity,System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.Net.Http.HttpClient)">
            <summary>
            Authenticates the request and add's the activity's <see cref="P:Microsoft.Bot.Schema.Activity.ServiceUrl"/>
            to the set of trusted URLs.
            </summary>
            <param name="activity">The activity.</param>
            <param name="authHeader">The authentication header.</param>
            <param name="credentials">The bot's credential provider.</param>
            <param name="provider">The bot's channel service provider.</param>
            <param name="httpClient">The HTTP client.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the claims-based
            identity for the request</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenValidation.ValidateAuthHeader(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Validates the authentication header of an incoming request.
            </summary>
            <param name="authHeader">The authentication header to validate.</param>
            <param name="credentials">The bot's credential provider.</param>
            <param name="channelProvider">The bot's channel service provider.</param>
            <param name="channelId">The ID of the channel that sent the request.</param>
            <param name="serviceUrl">The service URL for the activity.</param>
            <param name="httpClient">The HTTP client.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the claims-based
            identity for the request</remarks>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials">
            <summary>
            MicrosoftAppCredentials auth implementation and cache
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.Empty">
            <summary>
            An empty set of credentials.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.MicrosoftAppIdKey">
            <summary>
            The configuration property for the Microsoft app ID.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.MicrosoftAppPasswordKey">
            <summary>
            The configuration property for the Microsoft app Password.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.TokenTaskCache">
            <summary>
            A cache of the outstanding uncompleted or completed tasks for a given token, for ensuring that we never have more then 1 token request in flight
            per token at a time.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.AutoRefreshTimes">
            <summary>
            The time at which we will next refresh each token.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.TokenCache">
            <summary>
            A cache of the actual valid tokens, this is what is consumed 99.99% of the time regardless o whether there is a token refresh task in flight.
            We refresh tokens on a schedule which is faster then their expiration, and if there is a network failure, we continue to use the good token from
            the tokenCache while a new background refresh task gets scheduled.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.TokenCacheKey">
            <summary>
            The actual key we use for the token cache.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.MicrosoftAppId">
            <summary>
            Gets or sets the Microsoft app ID for this credential.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.MicrosoftAppPassword">
            <summary>
            Gets or sets the Microsoft app password for this credential.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.OAuthEndpoint">
            <summary>
            Gets the OAuth endpoint to use.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.OAuthScope">
            <summary>
            Gets the OAuth scope to use.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.AutoTokenRefreshTimeSpan">
            <summary>
            The time window within which the token will be automatically updated.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.TrustServiceUrl(System.String)">
            <summary>
            Adds the host of service url to <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials"/> trusted hosts.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <remarks>If expiration time is not provided, the expiration time will DateTime.UtcNow.AddDays(1).</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.TrustServiceUrl(System.String,System.DateTime)">
            <summary>
            Adds the host of service url to <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials"/> trusted hosts.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="expirationTime">The expiration time after which this service url is not trusted anymore.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.IsTrustedServiceUrl(System.String)">
            <summary>
            Checks if the service url is for a trusted host or not.
            </summary>
            <param name="serviceUrl">The service url</param>
            <returns>True if the host of the service url is trusted; False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.ProcessHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Apply the credentials to the HTTP request.
            </summary>
            <param name="request">The HTTP request.</param><param name="cancellationToken">Cancellation token.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.GetTokenAsync(System.Boolean)" -->
        <member name="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.OAuthException">
            <summary>
            Represents an OAuth exception.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.OAuthException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.OAuthException"/> class.
            </summary>
            <param name="body">The OAuth response body or reason.</param>
            <param name="inner">The exception thown during the OAuth request.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.IsTokenExpired(Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.OAuthResponse)">
            <summary>
            Has the token expired?  If so, then we await on every attempt to get a new token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.IsTokenOld(Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.OAuthResponse)">
            <summary>
            has token reached half/life ? If so, we get more agressive about trying to refresh it in the background
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.OAuthResponse">
            <summary>
            Describes the structure of an OAuth access token response.
            </summary>
            <remarks>
            Member variables to this class follow the RFC Naming conventions, rather than C# naming conventions. 
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.OAuthResponse.token_type">
            <summary>
            Gets or sets the type of token.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.OAuthResponse.expires_in">
            <summary>
            Gets or sets the time in seconds until the token expires.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.OAuthResponse.access_token">
            <summary>
            Gets or sets the access token string.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.OAuthResponse.expiration_time">
            <summary>
            Gets or sets the time at which the token expires.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials">
            <summary>
            MicrosoftGovernmentAppCredentials auth implementation
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials.Empty">
            <summary>
            An empty set of credentials.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials.OAuthEndpoint">
            <summary>
            Gets the OAuth endpoint to use.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials.OAuthScope">
            <summary>
            Gets the OAuth scope to use.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider.#ctor">
            <summary>
            Creates a SimpleChannelProvider with no ChannelService which will use Public Azure
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider.#ctor(System.String)">
            <summary>
            Creates a SimpleChannelProvider with the specified ChannelService
            </summary>
            <param name="channelService">The ChannelService to use. Null or empty strings represent Public Azure, the string 'https://botframework.us' represents US Government Azure, and other values are for private channels.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider.GetChannelServiceAsync">
            <summary>
            Gets the channel service property for this channel provider
            </summary>
            <returns>The channel service property for the channel provider</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider.IsGovernment">
            <summary>
            Gets a value of whether this provider represents a channel on US Government Azure
            </summary>
            <returns>True if this channel provider represents a channel on US Government Azure</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider.IsPublicAzure">
            <summary>
            Gets a value of whether this provider represents a channel on Public Azure
            </summary>
            <returns>True if this channel provider represents a channel on Public Azure</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider">
            <summary>
            A simple implementation of the <see cref="T:Microsoft.Bot.Connector.Authentication.ICredentialProvider"/> interface.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.AppId">
            <summary>
            Gets or sets the app ID for this credential.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.Password">
            <summary>
            Gets or sets the app password for this credential.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider"/> class
            with empty credentials.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider"/> class
            with the provided credentials.
            </summary>
            <param name="appId">The app ID.</param>
            <param name="password">The app password.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.IsValidAppIdAsync(System.String)">
            <summary>
            Validates an app ID.
            </summary>
            <param name="appId">The app ID to validate.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result is true if <paramref name="appId"/>
            is valid for the controller; otherwise, false.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.GetAppPasswordAsync(System.String)">
            <summary>
            Gets the app password for a given bot app ID.
            </summary>
            <param name="appId">The ID of the app to get the password for.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful and the app ID is valid, the result
            contains the password; otherwise, null.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.IsAuthenticationDisabledAsync">
            <summary>
            Checks whether bot authentication is disabled.
            </summary>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful and bot authentication is disabled, the result
            is true; otherwise, false.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConnectorClient">
             <summary>
             The Bot Connector REST API allows your bot to send and receive messages
             to channels configured in the
             [Bot Framework Developer Portal](https://dev.botframework.com). The
             Connector service uses industry-standard REST
             and JSON over HTTPS.
            
             Client libraries for this REST API are available. See below for a list.
            
             Many bots will use both the Bot Connector REST API and the associated
             [Bot State REST API](/en-us/restapi/state). The
             Bot State REST API allows a bot to store and retrieve state associated
             with users and conversations.
            
             Authentication for both the Bot Connector and Bot State REST APIs is
             accomplished with JWT Bearer tokens, and is
             described in detail in the [Connector
             Authentication](/en-us/restapi/authentication) document.
            
             # Client Libraries for the Bot Connector REST API
            
             * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
             * [Bot Builder for Node.js](/en-us/node/builder/overview/)
             * Generate your own from the [Connector API Swagger
             file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)
            
             © 2016 Microsoft
             </summary>
            <summary>
            ConnectorClient extension
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.Attachments">
            <summary>
            Gets the IAttachments.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.Conversations">
            <summary>
            Gets the IConversations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='httpClient'>
            HttpClient to be used
            </param>
            <param name='disposeHttpClient'>
            True: will dispose the provided httpClient on calling ConnectorClient.Dispose(). False: will not dispose provided httpClient</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='httpClient'>
            HttpClient to be used
            </param>
            <param name='disposeHttpClient'>
            True: will dispose the provided httpClient on calling ConnectorClient.Dispose(). False: will not dispose provided httpClient</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.Initialize">
            <summary>
            Initializes client properties.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,System.String,System.String,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the ConnectorClient class
            </summary>
            <param name="baseUri">Base URI for the Connector service</param>
            <param name="microsoftAppId">Optional. Your Microsoft app id. If null, this setting is read from settings["MicrosoftAppId"]</param>
            <param name="microsoftAppPassword">Optional. Your Microsoft app password. If null, this setting is read from settings["MicrosoftAppPassword"]</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials,System.Boolean,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the ConnectorClient class
            </summary>
            <param name="baseUri">Base URI for the Connector service</param>
            <param name="credentials">Credentials for the Connector service</param>
            <param name="addJwtTokenRefresher">(DEPRECATED)</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials,System.Net.Http.HttpClientHandler,System.Boolean,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instances of the ConnectorClient.
            </summary>
            <param name="baseUri">Base URI for the Connector service</param>
            <param name="credentials">Credentials for the Connector service</param>
            <param name="httpClientHandler">The httpClientHandler used by http client</param>
            <param name="addJwtTokenRefresher">(DEPRECATED)</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.GetOsVersion">
            <summary>Gets a description of the operating system of the Azure Bot Service.</summary>
            <returns>A description of the operating system of the Azure Bot Service.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.GetArchitecture">
            <summary>Gets the platform architecture of the Azure Bot Service.</summary>
            <returns>The platform architecture of the Azure Bot Service.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.GetASPNetVersion">
            <summary>Gets the name of the .NET Framework version of the Azure Bot Service..</summary>
            <returns>The name of the .NET Framework version of the Azure Bot Service.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.GetClientVersion``1(``0)">
            <summary>Gets the assembly version for the Azure Bot Service.</summary>
            <returns>The assembly version for the Azure Bot Service.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Conversations">
            <summary>
            Conversations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.#ctor(Microsoft.Bot.Connector.ConnectorClient)">
            <summary>
            Initializes a new instance of the Conversations class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.Conversations.Client">
            <summary>
            Gets a reference to the ConnectorClient
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetConversationsWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversations
             </summary>
             <remarks>
             List the Conversations in which this bot has participated.
            
             GET from this method with a skip token
            
             The return value is a ConversationsResult, which contains an array of
             ConversationMembers and a skip token.  If the skip token is not empty, then
             there are further values to be returned. Call this method again with the
             returned token to get more values.
            
             Each ConversationMembers object contains the ID of the conversation and an
             array of ChannelAccounts that describe the members of the conversation.
             </remarks>
             <param name='continuationToken'>
             skip or continuation token
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.CreateConversationWithHttpMessagesAsync(Microsoft.Bot.Schema.ConversationParameters,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             CreateConversation
             </summary>
             <remarks>
             Create a new Conversation.
            
             POST to this method with a
             * Bot being the bot creating the conversation
             * IsGroup set to true if this is not a direct message (default is false)
             * Array containing the members to include in the conversation
            
             The return value is a ResourceResponse which contains a conversation id
             which is suitable for use
             in the message payload and REST API uris.
            
             Most channels only support the semantics of bots initiating a direct
             message conversation.  An example of how to do that would be:
            
             ```
             var resource = await connector.conversations.CreateConversation(new
             ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
             ChannelAccount("user1") } );
             await connect.Conversations.SendToConversationAsync(resource.Id, new
             Activity() ... ) ;
            
             ```
             </remarks>
             <param name='parameters'>
             Parameters to create the conversation from
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.SendToConversationWithHttpMessagesAsync(System.String,Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             SendToConversation
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activity'>
             Activity to send
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.SendConversationHistoryWithHttpMessagesAsync(System.String,Microsoft.Bot.Schema.Transcript,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             SendConversationHistory
             </summary>
             <remarks>
             This method allows you to upload the historic activities to the
             conversation.
            
             Sender must ensure that the historic activities have unique ids and
             appropriate timestamps. The ids are used by the client to deal with
             duplicate activities and the timestamps are used by the client to render
             the activities in the right order.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='transcript'>
             Transcript of activities
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.UpdateActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             UpdateActivity
             </summary>
             <remarks>
             Edit an existing activity.
            
             Some channels allow you to edit an existing activity to reflect the new
             state of a bot conversation.
            
             For example, you can remove buttons after someone has clicked "Approve"
             button.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to update
             </param>
             <param name='activity'>
             replacement Activity
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.ReplyToActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             ReplyToActivity
             </summary>
             <remarks>
             This method allows you to reply to an activity.
            
             This is slightly different from SendToConversation().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId the reply is to (OPTIONAL)
             </param>
             <param name='activity'>
             Activity to send
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.DeleteActivityWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             DeleteActivity
             </summary>
             <remarks>
             Delete an existing activity.
            
             Some channels allow you to delete an existing activity, and if successful
             this method will remove the specified activity.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to delete
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetConversationMembersWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversationMembers
             </summary>
             <remarks>
             Enumerate the members of a conversation.
            
             This REST API takes a ConversationId and returns an array of ChannelAccount
             objects representing the members of the conversation.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetConversationPagedMembersWithHttpMessagesAsync(System.String,System.Nullable{System.Int32},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversationPagedMembers
             </summary>
             <remarks>
             Enumerate the members of a conversation one page at a time.
            
             This REST API takes a ConversationId. Optionally a pageSize and/or
             continuationToken can be provided. It returns a PagedMembersResult, which
             contains an array
             of ChannelAccounts representing the members of the conversation and a
             continuation token that can be used to get more values.
            
             One page of ChannelAccounts records are returned with each call. The number
             of records in a page may vary between channels and calls. The pageSize
             parameter can be used as
             a suggestion. If there are no additional results the response will not
             contain a continuation token. If there are no members in the conversation
             the Members will be empty or not present in the response.
            
             A response to a request that has a continuation token from a prior request
             may rarely return members from a previous request.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='pageSize'>
             Suggested page size
             </param>
             <param name='continuationToken'>
             Continuation Token
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.DeleteConversationMemberWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             DeleteConversationMember
             </summary>
             <remarks>
             Deletes a member from a conversation.
            
             This REST API takes a ConversationId and a memberId (of type string) and
             removes that member from the conversation. If that member was the last
             member
             of the conversation, the conversation will also be deleted.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='memberId'>
             ID of the member to delete from this conversation
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetActivityMembersWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetActivityMembers
             </summary>
             <remarks>
             Enumerate the members of an activity.
            
             This REST API takes a ConversationId and a ActivityId, returning an array
             of ChannelAccount objects representing the members of the particular
             activity in the conversation.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             Activity ID
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.UploadAttachmentWithHttpMessagesAsync(System.String,Microsoft.Bot.Schema.AttachmentData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             UploadAttachment
             </summary>
             <remarks>
             Upload an attachment directly into a channel's blob storage.
            
             This is useful because it allows you to store data in a compliant store
             when dealing with enterprises.
            
             The response is a ResourceResponse which contains an AttachmentId which is
             suitable for using with the attachments API.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='attachmentUpload'>
             Attachment data
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConversationsExtensions">
            <summary>
            ConversationsExtensions Conversation extensions
            </summary>
            <summary>
            Extension methods for Conversations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.Activity)">
            <summary>
            Create a new direct conversation between a bot and a user
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='bot'>Bot to create conversation from</param>
            <param name='user'>User to create conversation with</param>
            <param name="activity">(OPTIONAL) initial message to send to the new conversation</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Create a new direct conversation between a bot and a user
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='bot'>Bot to create conversation from</param>
            <param name='user'>User to create conversation with</param>
            <param name="activity">(OPTIONAL) initial message to send to the new conversation</param>
            <param name='cancellationToken'>The cancellation token.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity)">
            <summary>
            Create a new direct conversation between a bot and a user
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='botAddress'>Bot to create conversation from</param>
            <param name='userAddress'>User to create conversation with</param>
            <param name="activity">(OPTIONAL) initial message to send to the new conversation</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Create a new direct conversation between a bot and a user
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='botAddress'>Bot to create conversation from</param>
            <param name='userAddress'>User to create conversation with</param>
            <param name="activity">(OPTIONAL) initial message to send to the new conversation</param>
            <param name='cancellationToken'>The cancellation token</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity)">
            <summary>
            Send an activity to a conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Send an activity to a conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity)">
            <summary>
            Replyto an activity in an existing conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Reply to an activity in an existing conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity)">
            <summary>
            Update an activity in an existing conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to update
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Update an activity in an existing conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to update
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationsAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Threading.CancellationToken)">
             <summary>
             GetConversations
             </summary>
             <remarks>
             List the Conversations in which this bot has participated.
            
             GET from this method with a skip token
            
             The return value is a ConversationsResult, which contains an array of
             ConversationMembers and a skip token.  If the skip token is not empty, then
             there are further values to be returned. Call this method again with the
             returned token to get more values.
            
             Each ConversationMembers object contains the ID of the conversation and an
             array of ChannelAccounts that describe the members of the conversation.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='continuationToken'>
             skip or continuation token
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.ConversationParameters,System.Threading.CancellationToken)">
             <summary>
             CreateConversation
             </summary>
             <remarks>
             Create a new Conversation.
            
             POST to this method with a
             * Bot being the bot creating the conversation
             * IsGroup set to true if this is not a direct message (default is false)
             * Array containing the members to include in the conversation
            
             The return value is a ResourceResponse which contains a conversation id
             which is suitable for use
             in the message payload and REST API uris.
            
             Most channels only support the semantics of bots initiating a direct
             message conversation.  An example of how to do that would be:
            
             ```
             var resource = await connector.conversations.CreateConversation(new
             ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
             ChannelAccount("user1") } );
             await connect.Conversations.SendToConversationAsync(resource.Id, new
             Activity() ... ) ;
            
             ```
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='parameters'>
             Parameters to create the conversation from
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             SendToConversation
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activity'>
             Activity to send
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendConversationHistoryAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Schema.Transcript,System.Threading.CancellationToken)">
             <summary>
             SendConversationHistory
             </summary>
             <remarks>
             This method allows you to upload the historic activities to the
             conversation.
            
             Sender must ensure that the historic activities have unique ids and
             appropriate timestamps. The ids are used by the client to deal with
             duplicate activities and the timestamps are used by the client to render
             the activities in the right order.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='transcript'>
             Transcript of activities
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             UpdateActivity
             </summary>
             <remarks>
             Edit an existing activity.
            
             Some channels allow you to edit an existing activity to reflect the new
             state of a bot conversation.
            
             For example, you can remove buttons after someone has clicked "Approve"
             button.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to update
             </param>
             <param name='activity'>
             replacement Activity
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             ReplyToActivity
             </summary>
             <remarks>
             This method allows you to reply to an activity.
            
             This is slightly different from SendToConversation().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId the reply is to (OPTIONAL)
             </param>
             <param name='activity'>
             Activity to send
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             DeleteActivity
             </summary>
             <remarks>
             Delete an existing activity.
            
             Some channels allow you to delete an existing activity, and if successful
             this method will remove the specified activity.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to delete
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Threading.CancellationToken)">
             <summary>
             GetConversationMembers
             </summary>
             <remarks>
             Enumerate the members of a conversation.
            
             This REST API takes a ConversationId and returns an array of ChannelAccount
             objects representing the members of the conversation.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationPagedMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
             <summary>
             GetConversationPagedMembers
             </summary>
             <remarks>
             Enumerate the members of a conversation one page at a time.
            
             This REST API takes a ConversationId. Optionally a pageSize and/or
             continuationToken can be provided. It returns a PagedMembersResult, which
             contains an array
             of ChannelAccounts representing the members of the conversation and a
             continuation token that can be used to get more values.
            
             One page of ChannelAccounts records are returned with each call. The number
             of records in a page may vary between channels and calls. The pageSize
             parameter can be used as
             a suggestion. If there are no additional results the response will not
             contain a continuation token. If there are no members in the conversation
             the Members will be empty or not present in the response.
            
             A response to a request that has a continuation token from a prior request
             may rarely return members from a previous request.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='pageSize'>
             Suggested page size
             </param>
             <param name='continuationToken'>
             Continuation Token
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteConversationMemberAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             DeleteConversationMember
             </summary>
             <remarks>
             Deletes a member from a conversation.
            
             This REST API takes a ConversationId and a memberId (of type string) and
             removes that member from the conversation. If that member was the last
             member
             of the conversation, the conversation will also be deleted.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='memberId'>
             ID of the member to delete from this conversation
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetActivityMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             GetActivityMembers
             </summary>
             <remarks>
             Enumerate the members of an activity.
            
             This REST API takes a ConversationId and a ActivityId, returning an array
             of ChannelAccount objects representing the members of the particular
             activity in the conversation.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             Activity ID
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachmentAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Schema.AttachmentData,System.Threading.CancellationToken)">
             <summary>
             UploadAttachment
             </summary>
             <remarks>
             Upload an attachment directly into a channel's blob storage.
            
             This is useful because it allows you to store data in a compliant store
             when dealing with enterprises.
            
             The response is a ResourceResponse which contains an AttachmentId which is
             suitable for using with the attachments API.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='attachmentUpload'>
             Attachment data
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="T:Microsoft.Bot.Connector.IAttachments">
            <summary>
            Attachments operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IAttachments.GetAttachmentInfoWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachmentInfo
            </summary>
            <remarks>
            Get AttachmentInfo structure describing the attachment views
            </remarks>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IAttachments.GetAttachmentWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachment
            </summary>
            <remarks>
            Get the named view as binary content
            </remarks>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="T:Microsoft.Bot.Connector.IConnectorClient">
             <summary>
             The Bot Connector REST API allows your bot to send and receive messages
             to channels configured in the
             [Bot Framework Developer Portal](https://dev.botframework.com). The
             Connector service uses industry-standard REST
             and JSON over HTTPS.
            
             Client libraries for this REST API are available. See below for a list.
            
             Many bots will use both the Bot Connector REST API and the associated
             [Bot State REST API](/en-us/restapi/state). The
             Bot State REST API allows a bot to store and retrieve state associated
             with users and conversations.
            
             Authentication for both the Bot Connector and Bot State REST APIs is
             accomplished with JWT Bearer tokens, and is
             described in detail in the [Connector
             Authentication](/en-us/restapi/authentication) document.
            
             # Client Libraries for the Bot Connector REST API
            
             * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
             * [Bot Builder for Node.js](/en-us/node/builder/overview/)
             * Generate your own from the [Connector API Swagger
             file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)
            
             © 2016 Microsoft
             </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client
            subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.Attachments">
            <summary>
            Gets the IAttachments.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.Conversations">
            <summary>
            Gets the IConversations.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IConversations">
            <summary>
            Conversations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.GetConversationsWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversations
             </summary>
             <remarks>
             List the Conversations in which this bot has participated.
            
             GET from this method with a skip token
            
             The return value is a ConversationsResult, which contains an array
             of ConversationMembers and a skip token.  If the skip token is not
             empty, then
             there are further values to be returned. Call this method again
             with the returned token to get more values.
            
             Each ConversationMembers object contains the ID of the conversation
             and an array of ChannelAccounts that describe the members of the
             conversation.
             </remarks>
             <param name='continuationToken'>
             skip or continuation token
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.CreateConversationWithHttpMessagesAsync(Microsoft.Bot.Schema.ConversationParameters,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             CreateConversation
             </summary>
             <remarks>
             Create a new Conversation.
            
             POST to this method with a
             * Bot being the bot creating the conversation
             * IsGroup set to true if this is not a direct message (default is
             false)
             * Array containing the members to include in the conversation
            
             The return value is a ResourceResponse which contains a
             conversation id which is suitable for use
             in the message payload and REST API uris.
            
             Most channels only support the semantics of bots initiating a
             direct message conversation.  An example of how to do that would
             be:
            
             ```
             var resource = await connector.conversations.CreateConversation(new
             ConversationParameters(){ Bot = bot, members = new ChannelAccount[]
             { new ChannelAccount("user1") } );
             await connect.Conversations.SendToConversationAsync(resource.Id,
             new Activity() ... ) ;
            
             ```
             </remarks>
             <param name='parameters'>
             Parameters to create the conversation from
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.SendToConversationWithHttpMessagesAsync(System.String,Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             SendToConversation
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a
             conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConversation(conversationId) - will append the activity to
             the end of the conversation according to the timestamp or semantics
             of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as
             a reply to another activity, if the channel supports it. If the
             channel does not support nested replies, ReplyToActivity falls back
             to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activity'>
             Activity to send
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.SendConversationHistoryWithHttpMessagesAsync(System.String,Microsoft.Bot.Schema.Transcript,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             SendConversationHistory
             </summary>
             <remarks>
             This method allows you to upload the historic activities to the
             conversation.
            
             Sender must ensure that the historic activities have unique ids and
             appropriate timestamps. The ids are used by the client to deal with
             duplicate activities and the timestamps are used by the client to
             render the activities in the right order.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='transcript'>
             Transcript of activities
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.UpdateActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             UpdateActivity
             </summary>
             <remarks>
             Edit an existing activity.
            
             Some channels allow you to edit an existing activity to reflect the
             new state of a bot conversation.
            
             For example, you can remove buttons after someone has clicked
             "Approve" button.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to update
             </param>
             <param name='activity'>
             replacement Activity
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.ReplyToActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             ReplyToActivity
             </summary>
             <remarks>
             This method allows you to reply to an activity.
            
             This is slightly different from SendToConversation().
             * SendToConversation(conversationId) - will append the activity to
             the end of the conversation according to the timestamp or semantics
             of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as
             a reply to another activity, if the channel supports it. If the
             channel does not support nested replies, ReplyToActivity falls back
             to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId the reply is to (OPTIONAL)
             </param>
             <param name='activity'>
             Activity to send
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.DeleteActivityWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             DeleteActivity
             </summary>
             <remarks>
             Delete an existing activity.
            
             Some channels allow you to delete an existing activity, and if
             successful this method will remove the specified activity.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             activityId to delete
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.GetConversationMembersWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversationMembers
             </summary>
             <remarks>
             Enumerate the members of a conversation.
            
             This REST API takes a ConversationId and returns an array of
             ChannelAccount objects representing the members of the
             conversation.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.GetConversationPagedMembersWithHttpMessagesAsync(System.String,System.Nullable{System.Int32},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversationPagedMembers
             </summary>
             <remarks>
             Enumerate the members of a conversation one page at a time.
            
             This REST API takes a ConversationId. Optionally a pageSize and/or
             continuationToken can be provided. It returns a PagedMembersResult,
             which contains an array
             of ChannelAccounts representing the members of the conversation and
             a continuation token that can be used to get more values.
            
             One page of ChannelAccounts records are returned with each call.
             The number of records in a page may vary between channels and
             calls. The pageSize parameter can be used as
             a suggestion. If there are no additional results the response will
             not contain a continuation token. If there are no members in the
             conversation the Members will be empty or not present in the
             response.
            
             A response to a request that has a continuation token from a prior
             request may rarely return members from a previous request.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='pageSize'>
             Suggested page size
             </param>
             <param name='continuationToken'>
             Continuation Token
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.DeleteConversationMemberWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             DeleteConversationMember
             </summary>
             <remarks>
             Deletes a member from a conversation.
            
             This REST API takes a ConversationId and a memberId (of type
             string) and removes that member from the conversation. If that
             member was the last member
             of the conversation, the conversation will also be deleted.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='memberId'>
             ID of the member to delete from this conversation
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.GetActivityMembersWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetActivityMembers
             </summary>
             <remarks>
             Enumerate the members of an activity.
            
             This REST API takes a ConversationId and a ActivityId, returning an
             array of ChannelAccount objects representing the members of the
             particular activity in the conversation.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='activityId'>
             Activity ID
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.UploadAttachmentWithHttpMessagesAsync(System.String,Microsoft.Bot.Schema.AttachmentData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             UploadAttachment
             </summary>
             <remarks>
             Upload an attachment directly into a channel's blob storage.
            
             This is useful because it allows you to store data in a compliant
             store when dealing with enterprises.
            
             The response is a ResourceResponse which contains an AttachmentId
             which is suitable for using with the attachments API.
             </remarks>
             <param name='conversationId'>
             Conversation ID
             </param>
             <param name='attachmentUpload'>
             Attachment data
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="T:Microsoft.Bot.Connector.OAuthClient">
            <summary>
            Service client to handle requests to the Bot Framework API service.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.OAuthClient.OAuthEndpoint">
            <summary>
            The default endpoint that is used for API requests.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.OAuthClient.EmulateOAuthCards">
            <summary>
            When using the Emulator, whether to emulate the OAuthCard behavior or use connected flows
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.#ctor(Microsoft.Bot.Connector.ConnectorClient,System.String)">
            <summary>
            Initializes an new instance of the <see cref="T:Microsoft.Bot.Connector.OAuthClient"/> class.
            </summary>
            <param name="client">The Bot Connector REST client to use.</param>
            <param name="uri">The URL to use to get a token.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.GetUserTokenAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Gets a user token for a given user and connection.
            </summary>
            <param name="userId">The user's ID.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="magicCode">The user entered code to validate.</param>
            <param name="customHeaders"></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the <see cref="T:Microsoft.Bot.Schema.TokenResponse"/> contains the user token.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.SignOutUserAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Signs the user out of a connection.
            </summary>
            <param name="userId">The user's ID.</param>
            <param name="connectionName">Name of the auth connection to sign out of.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the response indicates whether the call to
            sign the user out was successful.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.GetSignInLinkAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name.
            </summary>
            <param name="state">A serialized and encoded parameter of a TokenExchangeState parameter.</param>
            <param name="finalRedirect">The endpoint URL for the final page of a succesful login attempt.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully and the call to the OAuth client is successful,
            the result contains the signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.GetTokenStatusAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the status of tokens for connections for this bot for a particular user
            </summary>
            <param name="userId"></param>
            <param name="includeFilter">A comma seperated list of connections to include. If null, then all connections are returned</param>
            <param name="customHeaders"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.GetAadTokensAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)">
            <summary>
            Retrieve an Azure Active Directory token for particular AAD resources.
            </summary>
            <param name="userId">The user's ID.</param>
            <param name="connectionName">Name of the auth connection to use for AAD token exchange.</param>
            <param name="resourceUrls">The collection of resource URLs for which to get tokens</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the response includes a collection of TokenResponse
            objects with the resourceUrl and its corresponding TokenResponse.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.SendEmulateOAuthCardsAsync(System.Boolean)">
            <summary>
            Send a dummy OAuth card when the bot is being used on the Emulator for testing without fetching a real token.
            </summary>
            <param name="emulateOAuthCards">Indicates whether the Emulator should emulate the OAuth card.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Schema.ErrorResponseException">
            <summary>
            Exception thrown for an invalid response with ErrorResponse
            information.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Schema.ErrorResponseException.Request">
            <summary>
            Gets information about the associated HTTP request.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Schema.ErrorResponseException.Response">
            <summary>
            Gets information about the associated HTTP response.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Schema.ErrorResponseException.Body">
            <summary>
            Gets or sets the body object.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Schema.ErrorResponseException.#ctor">
            <summary>
            Initializes a new instance of the ErrorResponseException class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Schema.ErrorResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ErrorResponseException class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.Bot.Schema.ErrorResponseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ErrorResponseException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
    </members>
</doc>
