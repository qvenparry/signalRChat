<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bot.Builder</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Bot.Builder.Adapters.TestAdapter">
            <summary>
            A mock adapter that can be used for unit testing of bot logic.
            </summary>
            <seealso cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.#ctor(Microsoft.Bot.Schema.ConversationReference,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestAdapter"/> class.
            </summary>
            <param name="conversation">A reference to the conversation to begin the adapter state with.</param>
            <param name="sendTraceActivity">Indicates whether the adapter should add to its <see cref="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue"/>
            any trace activities generated by the bot.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue">
            <summary>
            Gets the queue of responses from the bot.
            </summary>
            <value>The queue of responses from the bot.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Adapters.TestAdapter.Conversation">
            <summary>
            Gets or sets a reference to the current coversation.
            </summary>
            <value>A reference to the current conversation.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.Use(Microsoft.Bot.Builder.IMiddleware)">
            <summary>
            Adds middleware to the adapter's pipeline.
            </summary>
            <param name="middleware">The middleware to add.</param>
            <returns>The updated adapter object.</returns>
            <remarks>Middleware is added to the adapter at initialization time.
            For each turn, the adapter calls middleware in the order in which you added it.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.ProcessActivityAsync(Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Receives an activity and runs it through the middleware pipeline.
            </summary>
            <param name="activity">The activity to process.</param>
            <param name="callback">The bot logic to invoke.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.SendActivitiesAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity[],System.Threading.CancellationToken)">
            <summary>
            Sends activities to the conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activities">The activities to send.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.UpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Replaces an existing activity in the <see cref="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue"/>.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activity">New replacement activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>Before calling this, set the ID of the replacement activity to the ID
            of the activity to replace.</para></remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.DeleteActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity in the <see cref="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue"/>.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="reference">Conversation reference for the activity to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>The <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/> of the conversation
            reference identifies the activity to delete.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.CreateConversationAsync(System.String,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a new conversation on the specified channel.
            </summary>
            <param name="channelId">The ID of the channel.</param>
            <param name="callback">The bot logic to call when the conversation is created.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>This resets the <see cref="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue"/>, and does not maintain multiple converstion queues.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.GetNextReply">
            <summary>
            Dequeues and returns the next bot response from the <see cref="P:Microsoft.Bot.Builder.Adapters.TestAdapter.ActiveQueue"/>.
            </summary>
            <returns>The next activity in the queue; or null, if the queue is empty.</returns>
            <remarks>A <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object calls this to get the next response from the bot.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.MakeActivity(System.String)">
            <summary>
            Creates a message activity from text and the current conversational context.
            </summary>
            <param name="text">The message text.</param>
            <returns>An appropriate message activity.</returns>
            <remarks>A <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object calls this to get a message activity
            appropriate to the current conversation.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestAdapter.SendTextToBotAsync(System.String,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Processes a message activity from a user.
            </summary>
            <param name="userSays">The text of the user's message.</param>
            <param name="callback">The turn processing logic to use.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.Adapters.ValidateReply">
            <summary>
            Represents a method the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> can call to validate an activity.
            </summary>
            <param name="expected">The expected activity from the bot or adapter.</param>
            <param name="actual">The actual activity from the bot or adapter.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Adapters.TestFlow">
            <summary>
            A mock channel that can be used for unit testing of bot logic.
            </summary>
            <remarks>You can use this class to mimic input from a a user or a channel to validate
            that the bot or adapter responds as expected.</remarks>
            <seealso cref="T:Microsoft.Bot.Builder.Adapters.TestAdapter"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.#ctor(Microsoft.Bot.Builder.Adapters.TestAdapter,Microsoft.Bot.Builder.BotCallbackHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> class.
            </summary>
            <param name="adapter">The test adapter to use.</param>
            <param name="callback">The bot turn processing logic to test.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.#ctor(System.Threading.Tasks.Task,Microsoft.Bot.Builder.Adapters.TestFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> class from an existing flow.
            </summary>
            <param name="testTask">The exchange to add to the exchanges in the existing flow.</param>
            <param name="flow">The flow to build up from. This provides the test adapter to use,
            the bot turn processing locig to test, and a set of exchanges to model and test.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.#ctor(Microsoft.Bot.Builder.Adapters.TestAdapter,Microsoft.Bot.Builder.IBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> class.
            </summary>
            <param name="adapter">The test adapter to use.</param>
            <param name="bot">The bot containing the turn processing logic to test.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.StartTestAsync">
            <summary>
            Starts the execution of the test flow.
            </summary>
            <returns>Runs the exchange between the user and the bot.</returns>
            <remarks>This methods sends the activities from the user to the bot and
            checks the responses from the bot based on the activiies described in the
            current test flow.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)">
            <summary>
            Adds a message activity from the user to the bot.
            </summary>
            <param name="userSays">The text of the message to send.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends a new message activity from the user to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Adds an activity from the user to the bot.
            </summary>
            <param name="userActivity">The activity to send.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends a new activity from the user to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Delay(System.UInt32)">
            <summary>
            Adds a delay in the conversation.
            </summary>
            <param name="ms">The delay length in milliseconds.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends a delay to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(System.String,System.String,System.UInt32)">
            <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
            <param name="expected">The expected text of a message from the bot.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this assertion to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.String,System.UInt32)">
            <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
            <param name="expected">The expected activity from the bot.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this assertion to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(System.Action{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)">
            <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
            <param name="validateActivity">A validation method to apply to an activity from the bot.
            This activity should throw an exception if validation fails.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this assertion to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.String,System.String,System.String,System.UInt32)">
            <summary>
            Shortcut for calling <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)"/> followed by <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(System.String,System.String,System.UInt32)"/>.
            </summary>
            <param name="userSays">The text of the message to send.</param>
            <param name="expected">The expected text of a message from the bot.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this exchange to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.String,Microsoft.Bot.Schema.Activity,System.String,System.UInt32)">
            <summary>
            Shortcut for calling <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)"/> followed by <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.String,System.UInt32)"/>.
            </summary>
            <param name="userSays">The text of the message to send.</param>
            <param name="expected">The expected activity from the bot.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this exchange to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.String,System.Action{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)">
            <summary>
            Shortcut for calling <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)"/> followed by <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(System.Action{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)"/>.
            </summary>
            <param name="userSays">The text of the message to send.</param>
            <param name="validateActivity">A validation method to apply to an activity from the bot.
            This activity should throw an exception if validation fails.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this exchange to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)">
            <summary>
            Shorcut for adding an arbitray exchange between the user and bot.
            Each activity with a <see cref="P:Microsoft.Bot.Schema.IActivity.From"/>.<see cref="P:Microsoft.Bot.Schema.ChannelAccount.Role"/> equals to "bot"
            will be processed with the <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.String,System.UInt32)"/> method.
            Every other activity will be processed as user's message via the <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(Microsoft.Bot.Schema.IActivity)"/> method.
            </summary>
            <param name="activities">The list of activities to test.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this exchange to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.IActivity},Microsoft.Bot.Builder.Adapters.ValidateReply,System.String,System.UInt32)">
            <summary>
            Shorcut for adding an arbitray exchange between the user and bot.
            Each activity with a <see cref="P:Microsoft.Bot.Schema.IActivity.From"/>.<see cref="P:Microsoft.Bot.Schema.ChannelAccount.Role"/> equals to "bot"
            will be processed with the <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.String,System.UInt32)"/> method.
            Every other activity will be processed as user's message via the <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(Microsoft.Bot.Schema.IActivity)"/> method.
            </summary>
            <param name="activities">The list of activities to test.</param>
            <param name="validateReply">The delegate to call to validate responses from the bot.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this exchange to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReplyOneOf(System.String[],System.String,System.UInt32)">
            <summary>
            Adds an assertion that the bot's response is contained within a set of acceptable responses.
            </summary>
            <param name="candidates">The set of acceptable messages.</param>
            <param name="description">A message to send if the actual response is not as expected.</param>
            <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object that appends this assertion to the modeled exchange.</returns>
            <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow"/> object.</remarks>
            <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
        </member>
        <member name="T:Microsoft.Bot.Builder.AutoSaveStateMiddleware">
            <summary>
             Middleware to automatically call .SaveChanges() at the end of the turn for all BotState class it is managing.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.AutoSaveStateMiddleware.#ctor(Microsoft.Bot.Builder.BotState[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.AutoSaveStateMiddleware"/> class.
            </summary>
            <param name="botStates">initial list of <see cref="T:Microsoft.Bot.Builder.BotState"/> objects to manage.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.AutoSaveStateMiddleware.BotStateSet">
            <summary>
            Gets or sets the list of state management objects managed by this object.
            </summary>
            <value>The state management objects managed by this object.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.AutoSaveStateMiddleware.Add(Microsoft.Bot.Builder.BotState)">
            <summary>
            Add a BotState to the list of sources to load.
            </summary>
            <param name="botState">botState to manage.</param>
            <returns>botstateset for chaining more .Use().</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.AutoSaveStateMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Middleware implementation which calls savesChanges automatically at the end of the turn.
            </summary>
            <param name="turnContext">turn context.</param>
            <param name="next">next middlware.</param>
            <param name="cancellationToken">cancellationToken.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotAdapter">
            <summary>
            Represents a bot adapter that can connect a bot to a service endpoint.
            This class is abstract.
            </summary>
            <remarks>The bot adapter encapsulates authentication processes and sends
            activities to and receives activities from the Bot Connector Service. When your
            bot receives an activity, the adapter creates a context object, passes it to your
            bot's application logic, and sends responses back to the user's channel.
            <para>Use <see cref="M:Microsoft.Bot.Builder.BotAdapter.Use(Microsoft.Bot.Builder.IMiddleware)"/> to add <see cref="T:Microsoft.Bot.Builder.IMiddleware"/> objects
            to your adapter’s middleware collection. The adapter processes and directs
            incoming activities in through the bot middleware pipeline to your bot’s logic
            and then back out again. As each activity flows in and out of the bot, each piece
            of middleware can inspect or act upon the activity, both before and after the bot
            logic runs.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
            <seealso cref="T:Microsoft.Bot.Builder.IMiddleware"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotAdapter.OnTurnError">
            <summary>
            Gets or sets an error handler that can catche exceptions in the middleware or application.
            </summary>
            <value>An error handler that can catch exceptions in the middleware or application.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotAdapter.MiddlewareSet">
            <summary>
            Gets the collection of middleware in the adapter's pipeline.
            </summary>
            <value>The middleware collection for the pipeline.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.Use(Microsoft.Bot.Builder.IMiddleware)">
            <summary>
            Adds middleware to the adapter's pipeline.
            </summary>
            <param name="middleware">The middleware to add.</param>
            <returns>The updated adapter object.</returns>
            <remarks>Middleware is added to the adapter at initialization time.
            For each turn, the adapter calls middleware in the order in which you added it.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.SendActivitiesAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity[],System.Threading.CancellationToken)">
            <summary>
            When overridden in a derived class, sends activities to the conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activities">The activities to send.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.UpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            When overridden in a derived class, replaces an existing activity in the
            conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activity">New replacement activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>Before calling this, set the ID of the replacement activity to the ID
            of the activity to replace.</para></remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.DeleteActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            When overridden in a derived class, deletes an existing activity in the
            conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="reference">Conversation reference for the activity to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>The <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/> of the conversation
            reference identifies the activity to delete.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Sends a proactive message to a conversation.
            </summary>
            <param name="botId">The application ID of the bot. This paramter is ignored in
            single tenant the Adpters (Console, Test, etc) but is critical to the BotFrameworkAdapter
            which is multi-tenant aware. </param>
            <param name="reference">A reference to the conversation to continue.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Call this method to proactively send a message to a conversation.
            Most _channels require a user to initiate a conversation with a bot
            before the bot can send activities to the user.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Starts activity processing for the current bot turn.
            </summary>
            <param name="turnContext">The turn's context object.</param>
            <param name="callback">A callback method to run at the end of the pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="turnContext"/> is null.</exception>
            <remarks>The adapter calls middleware in the order in which you added it.
            The adapter passes in the context object for the turn and a next delegate,
            and the middleware calls the delegate to pass control to the next middleware
            in the pipeline. Once control reaches the end of the pipeline, the adapter calls
            the <paramref name="callback"/> method. If a middleware component doesn’t call
            the next delegate, the adapter does not call  any of the subsequent middleware’s
            <see cref="M:Microsoft.Bot.Builder.IMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)"/>
            methods or the callback method, and the pipeline short circuits.
            <para>When the turn is initiated by a user activity (reactive messaging), the
            callback method will be a reference to the bot's
            <see cref="M:Microsoft.Bot.Builder.IBot.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> method. When the turn is
            initiated by a call to <see cref="M:Microsoft.Bot.Builder.BotAdapter.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
            (proactive messaging), the callback method is the callback method that was provided in the call.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotAssert">
            <summary>
            Provides methods for debugging Bot Builder code.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAssert.ActivityNotNull(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Checks that an activity object is not <c>null</c>.
            </summary>
            <param name="activity">The activity object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activity"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAssert.ContextNotNull(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Checks that a context object is not <c>null</c>.
            </summary>
            <param name="turnContext">The context object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="turnContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAssert.ConversationReferenceNotNull(Microsoft.Bot.Schema.ConversationReference)">
            <summary>
            Checks that a conversation reference object is not <c>null</c>.
            </summary>
            <param name="reference">The conversation reference object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reference"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAssert.ActivityListNotNull(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Activity})">
            <summary>
            Checks that an activity collection is not <c>null</c>.
            </summary>
            <param name="activities">The activities.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activities"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAssert.MiddlewareNotNull(Microsoft.Bot.Builder.IMiddleware)">
            <summary>
            Checks that a middleware object is not <c>null</c>.
            </summary>
            <param name="middleware">The middleware object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="middleware"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotAssert.MiddlewareNotNull(System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.IMiddleware})">
            <summary>
            Checks that a middleware collection is not <c>null</c>.
            </summary>
            <param name="middleware">The middleware.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="middleware"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotCallbackHandler">
            <summary>
            The callback delegate for application code.
            </summary>
            <param name="turnContext">The turn context.</param>
            <param name="cancellationToken">The task cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotFrameworkAdapter">
            <summary>
            A bot adapter that can connect a bot to a service endpoint.
            </summary>
            <remarks>The bot adapter encapsulates authentication processes and sends
            activities to and receives activities from the Bot Connector Service. When your
            bot receives an activity, the adapter creates a context object, passes it to your
            bot's application logic, and sends responses back to the user's channel.
            <para>Use <see cref="M:Microsoft.Bot.Builder.BotFrameworkAdapter.Use(Microsoft.Bot.Builder.IMiddleware)"/> to add <see cref="T:Microsoft.Bot.Builder.IMiddleware"/> objects
            to your adapter’s middleware collection. The adapter processes and directs
            incoming activities in through the bot middleware pipeline to your bot’s logic
            and then back out again. As each activity flows in and out of the bot, each piece
            of middleware can inspect or act upon the activity, both before and after the bot
            logic runs.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
            <seealso cref="T:Microsoft.Bot.Builder.IMiddleware"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.#ctor(Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,Microsoft.Rest.TransientFaultHandling.RetryPolicy,System.Net.Http.HttpClient,Microsoft.Bot.Builder.IMiddleware,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter"/> class,
            using a credential provider.
            </summary>
            <param name="credentialProvider">The credential provider.</param>
            <param name="channelProvider">The channel provider.</param>
            <param name="connectorClientRetryPolicy">Retry policy for retrying HTTP operations.</param>
            <param name="customHttpClient">The HTTP client.</param>
            <param name="middleware">The middleware to initially add to the adapter.</param>
            <param name="logger">The ILogger implementation this adapter should use.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="credentialProvider"/> is <c>null</c>.</exception>
            <remarks>Use a <see cref="T:Microsoft.Bot.Builder.MiddlewareSet"/> object to add multiple middleware
            components in the conustructor. Use the <see cref="M:Microsoft.Bot.Builder.BotFrameworkAdapter.Use(Microsoft.Bot.Builder.IMiddleware)"/> method to
            add additional middleware to the adapter after construction.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Sends a proactive message from the bot to a conversation.
            </summary>
            <param name="botAppId">The application ID of the bot. This is the appId returned by Portal registration, and is
            generally found in the "MicrosoftAppId" parameter in appSettings.json.</param>
            <param name="reference">A reference to the conversation to continue.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="botAppId"/>, <paramref name="reference"/>, or
            <paramref name="callback"/> is <c>null</c>.</exception>
            <remarks>Call this method to proactively send a message to a conversation.
            Most _channels require a user to initaiate a conversation with a bot
            before the bot can send activities to the user.
            <para>This method registers the following services for the turn.<list type="bullet">
            <item><see cref="T:System.Security.Principal.IIdentity"/> (key = "BotIdentity"), a claims identity for the bot.</item>
            <item><see cref="T:Microsoft.Bot.Connector.IConnectorClient"/>, the channel connector client to use this turn.</item>
            </list></para>
            <para>
            This overload differers from the Node implementation by requiring the BotId to be
            passed in. The .Net code allows multiple bots to be hosted in a single adapter which
            isn't something supported by Node.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ProcessActivityAsync(System.String,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.Use(Microsoft.Bot.Builder.IMiddleware)">
            <summary>
            Adds middleware to the adapter's pipeline.
            </summary>
            <param name="middleware">The middleware to add.</param>
            <returns>The updated adapter object.</returns>
            <remarks>Middleware is added to the adapter at initialization time.
            For each turn, the adapter calls middleware in the order in which you added it.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ProcessActivityAsync(System.String,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a turn context and runs the middleware pipeline for an incoming activity.
            </summary>
            <param name="authHeader">The HTTP authentication header of the request.</param>
            <param name="activity">The incoming activity.</param>
            <param name="callback">The code to run at the end of the adapter's middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute. If the activity type
            was 'Invoke' and the corresponding key (channelId + activityId) was found
            then an InvokeResponse is returned, otherwise null is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="activity"/> is <c>null</c>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">authentication failed.</exception>
            <remarks>Call this method to reactively send a message to a conversation.
            If the task completes successfully, then if the activity's <see cref="P:Microsoft.Bot.Schema.Activity.Type"/>
            is <see cref="F:Microsoft.Bot.Schema.ActivityTypes.Invoke"/> and the corresponding key
            (<see cref="P:Microsoft.Bot.Schema.Activity.ChannelId"/> + <see cref="P:Microsoft.Bot.Schema.Activity.Id"/>) is found
            then an <see cref="T:Microsoft.Bot.Builder.InvokeResponse"/> is returned, otherwise null is returned.
            <para>This method registers the following services for the turn.<list type="bullet">
            <item><see cref="T:System.Security.Principal.IIdentity"/> (key = "BotIdentity"), a claims identity for the bot.</item>
            <item><see cref="T:Microsoft.Bot.Connector.IConnectorClient"/>, the channel connector client to use this turn.</item>
            </list></para>
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.RunPipelineAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.ProcessActivityAsync(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a turn context and runs the middleware pipeline for an incoming activity.
            </summary>
            <param name="identity">A <see cref="T:System.Security.Claims.ClaimsIdentity"/> for the request.</param>
            <param name="activity">The incoming activity.</param>
            <param name="callback">The code to run at the end of the adapter's middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.SendActivitiesAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity[],System.Threading.CancellationToken)">
            <summary>
            Sends activities to the conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activities">The activities to send.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.UpdateActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Replaces an existing activity in the conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activity">New replacement activity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>Before calling this, set the ID of the replacement activity to the ID
            of the activity to replace.</para></remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.DeleteActivityAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity in the conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="reference">Conversation reference for the activity to delete.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>The <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/> of the conversation
            reference identifies the activity to delete.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.DeleteConversationMemberAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a member from the current conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="memberId">The ID of the member to remove from the conversation.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetActivityMembersAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Lists the members of a given activity.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activityId">(Optional) Activity ID to enumerate. If not specified the current activities ID will be used.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>List of Members of the activity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetConversationMembersAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Lists the members of the current conversation.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>List of Members of the current conversation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetConversationsAsync(System.String,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials,System.String,System.Threading.CancellationToken)">
            <summary>
            Lists the Conversations in which this bot has participated for a given channel server. The
            channel server returns results in pages and each page will include a `continuationToken`
            that can be used to fetch the next page of results from the server.
            </summary>
            <param name="serviceUrl">The URL of the channel server to query.  This can be retrieved
            from `context.activity.serviceUrl`. </param>
            <param name="credentials">The credentials needed for the Bot to connect to the services.</param>
            <param name="continuationToken"></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the members of the current conversation.
            This overload may be called from outside the context of a conversation, as only the
            bot's service URL and credentials are required.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetConversationsAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Lists the Conversations in which this bot has participated for a given channel server. The
            channel server returns results in pages and each page will include a `continuationToken`
            that can be used to fetch the next page of results from the server.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="continuationToken"></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the members of the current conversation.
            This overload may be called during standard activity processing, at which point the Bot's
            service URL and credentials that are part of the current activity processing pipeline
            will be used.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetUserTokenAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Attempts to retrieve the token for a user that's in a login flow.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="magicCode">(Optional) Optional user entered code to validate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Token Response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetOauthSignInLinkAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="finalRedirect">The final URL that the OAuth flow will redirect to.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the raw signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.SignOutUserAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Signs the user out with the token server.
            </summary>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="userId">User id of user to sign out.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetTokenStatusAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String)">
            <summary>
            Retrieves the token status for each configured connection for the given user.
            </summary>
            <param name="context">Context for the current turn of conversation with the user.</param>
            <param name="userId">The user Id for which token status is retrieved.</param>
            <param name="includeFilter">Optional comma seperated list of connection's to include. Blank will return token status for all configured connections.</param>
            <returns>Array of TokenStatus.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetAadTokensAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.String[],System.String)">
            <summary>
            Retrieves Azure Active Directory tokens for particular resources on a configured connection.
            </summary>
            <param name="context">Context for the current turn of conversation with the user.</param>
            <param name="connectionName">The name of the Azure Active Direcotry connection configured with this bot.</param>
            <param name="resourceUrls">The list of resource URLs to retrieve tokens for.</param>
            <param name="userId">The user Id for which tokens are retrieved. If passing in null the userId is taken from the Activity in the ITurnContext.</param>
            <returns>Dictionary of resourceUrl to the corresponding TokenResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CreateConversationAsync(System.String,System.String,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials,Microsoft.Bot.Schema.ConversationParameters,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a conversation on the specified channel.
            </summary>
            <param name="channelId">The ID for the channel.</param>
            <param name="serviceUrl">The channel's service URL endpoint.</param>
            <param name="credentials">The application credentials for the bot.</param>
            <param name="conversationParameters">The conversation information to use to
            create the conversation.</param>
            <param name="callback">The method to call for the resulting bot turn.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>To start a conversation, your bot must know its account information
            and the user's account information on that channel.
            Most _channels only support initiating a direct message (non-group) conversation.
            <para>The adapter attempts to create a new conversation on the channel, and
            then sends a <c>conversationUpdate</c> activity through its middleware pipeline
            to the <paramref name="callback"/> method.</para>
            <para>If the conversation is established with the
            specified users, the ID of the activity's <see cref="P:Microsoft.Bot.Schema.IActivity.Conversation"/>
            will contain the ID of the new conversation.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CreateOAuthApiClientAsync(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Creates an OAuth client for the bot.
            </summary>
            <param name="turnContext">The context object for the current turn.</param>
            <returns>An OAuth client for the bot.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CreateConnectorClientAsync(System.String,System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <summary>
            Creates the connector client asynchronous.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="claimsIdentity">The claims identity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>ConnectorClient instance.</returns>
            <exception cref="T:System.NotSupportedException">ClaimsIdemtity cannot be null. Pass Anonymous ClaimsIdentity if authentication is turned off.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.CreateConnectorClient(System.String,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials)">
            <summary>
            Creates the connector client.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="appCredentials">The application credentials for the bot.</param>
            <returns>Connector client instance.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkAdapter.GetAppCredentialsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the application credentials. App Credentials are cached so as to ensure we are not refreshing
            token everytime.
            </summary>
            <param name="appId">The application identifier (AAD Id for the bot).</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>App credentials.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotFrameworkHttpStatusCodeErrorDetectionStrategy">
            <summary>
            Bot Framework HTTP Status code error detection strategy.
            </summary>
            <seealso cref="T:Microsoft.Rest.TransientFaultHandling.ITransientErrorDetectionStrategy" />
        </member>
        <member name="M:Microsoft.Bot.Builder.BotFrameworkHttpStatusCodeErrorDetectionStrategy.IsTransient(System.Exception)">
            <summary>
            Returns true if status code in HttpRequestExceptionWithStatus exception is RequestTimeout, TooManyRequests, NotFound or greater
            than or equal to 500 and not NotImplemented (501) or HttpVersionNotSupported (505).
            </summary>
            <param name="ex">Exception to check against.</param>
            <returns>True if exception is transient otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotState">
            <summary>
            Reads and writes state for your bot to storage.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.#ctor(Microsoft.Bot.Builder.IStorage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.BotState"/> class.
            </summary>
            <param name="storage">The storage provider to use.</param>
            <param name="contextServiceKey">the key for caching on the context services dictionary.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.CreateProperty``1(System.String)">
            <summary>
            Create a property definition and register it with this BotState.
            </summary>
            <typeparam name="T">type of property.</typeparam>
            <param name="name">name of the property.</param>
            <returns>The created state property accessor.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.LoadAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads in  the current state object and caches it in the context object for this turm.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="force">Optional. True to bypass the cache.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.SaveChangesAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            If it has changed, writes to storage the state object that is cached in the current context object for this turn.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="force">Optional. True to save state to storage whether or not there are changes.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.ClearStateAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Clears any state currently stored in this state scope.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="cancellationToken">cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>NOTE: that SaveChangesAsync must be called in order for the cleared state to be persisted to the underlying store.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.DeleteAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Delete any state currently stored in this state scope.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="cancellationToken">cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.GetStorageKey(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            When overridden in a derived class, gets the key to use when reading and writing state to and from storage.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <returns>The storage key.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.GetPropertyValueAsync``1(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a property from the state cache in the turn context.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="turnContext">The context object for this turn.</param>
            <param name="propertyName">The name of the property to get.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result contains the property value.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.DeletePropertyValueAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a property from the state cache in the turn context.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="propertyName">The name of the property to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.SetPropertyValueAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Set the value of a property in the state cache in the turn context.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="propertyName">The name of the property to set.</param>
            <param name="value">The value to set on the property.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotState.CachedBotState">
            <summary>
            Internal cached bot state.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotState.BotStatePropertyAccessor`1">
            <summary>
            Implements IPropertyAccessor for an IPropertyContainer.
            Note the semantic of this accessor are intended to be lazy, this means teh Get, Set and Delete
            methods will first call LoadAsync. This will be a no-op if the data is already loaded.
            The implication is you can just use this accessor in the application code directly without first calling LoadAsync
            this approach works with the AutoSaveStateMiddleware which will save as needed at the end of a turn.
            </summary>
            <typeparam name="T">type of value the propertyAccessor accesses.</typeparam>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotState.BotStatePropertyAccessor`1.Name">
            <summary>
            Gets name of the property.
            </summary>
            <value>
            name of the property.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.BotStatePropertyAccessor`1.DeleteAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Delete the property. The semantics are intended to be lazy, note the use of LoadAsync at the start.
            </summary>
            <param name="turnContext">The turn context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.BotStatePropertyAccessor`1.GetAsync(Microsoft.Bot.Builder.ITurnContext,System.Func{`0},System.Threading.CancellationToken)">
            <summary>
            Get the property value. The semantics are intended to be lazy, note the use of LoadAsync at the start.
            /// </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="defaultValueFactory">Defines the default value. Invoked when no value been set for the requested state property.  If defaultValueFactory is defined as null, the MissingMemberException will be thrown if the underlying property is not set.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotState.BotStatePropertyAccessor`1.SetAsync(Microsoft.Bot.Builder.ITurnContext,`0,System.Threading.CancellationToken)">
            <summary>
            Set the property value. The semantics are intended to be lazy, note the use of LoadAsync at the start.
            </summary>
            <param name="turnContext">turn context.</param>
            <param name="value">value.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotStateSet">
            <summary>
             Manages a collection of botState and provides ability to load and save in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotStateSet.#ctor(Microsoft.Bot.Builder.BotState[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.BotStateSet"/> class.
            </summary>
            <param name="botStates">initial list of <see cref="T:Microsoft.Bot.Builder.BotState"/> objects to manage.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.BotStateSet.BotStates">
            <summary>
            Gets or sets the BotStates list for the BotStateSet.
            </summary>
            <value>The BotState objects managed by this class.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotStateSet.Add(Microsoft.Bot.Builder.BotState)">
            <summary>
            Add a BotState to the set.
            </summary>
            <param name="botState">BotState object</param>
            <returns>BotStateSet so you can fluently call Add() multiple times.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotStateSet.LoadAllAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Load all BotState records in parallel.
            </summary>
            <param name="turnContext">turn context.</param>
            <param name="force">should data be forced into cache.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.BotStateSet.SaveAllChangesAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Save All BotState changes in parallel.
            </summary>
            <param name="turnContext">turn context.</param>
            <param name="force">should data be forced to save even if no change were detected.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.ConversationState">
            <summary>
            Handles persistence of a conversation state object using the conversation ID as part of the key.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.ConversationState.#ctor(Microsoft.Bot.Builder.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.ConversationState"/> class.
            </summary>
            <param name="storage">The storage provider to use.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.ConversationState.GetStorageKey(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Gets the key to use when reading and writing state to and from storage.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <returns>The storage key.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IBot">
            <summary>
            Represents a bot that can operate on incoming activities.
            </summary>
            <remarks>A <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> passes incoming activities from the user's
            channel to the bot's <see cref="M:Microsoft.Bot.Builder.IBot.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> method.</remarks>
            <seealso cref="T:Microsoft.Bot.Builder.IMiddleware"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBot.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            When implemented in a bot, handles an incoming activity.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>The <paramref name="turnContext"/> provides information about the
            incoming activity, and other data needed to process the activity.</remarks>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.IBotTelemetryClient">
            <summary>
            Logging client for Bot Telemetry.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackAvailability(System.String,System.DateTimeOffset,System.TimeSpan,System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Send information about availability of an application.
            </summary>
            <param name="name">Availability test name.</param>
            <param name="timeStamp">The time when the availability was captured.</param>
            <param name="duration">The time taken for the availability test to run.</param>
            <param name="runLocation">Name of the location the availability test was run from.</param>
            <param name="success">True if the availability test ran successfully.</param>
            <param name="message">Error message on availability test run failure.</param>
            <param name="properties">Named string values you can use to classify and search for this availability telemetry.</param>
            <param name="metrics">Additional values associated with this availability telemetry.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackDependency(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Send information about an external dependency (outgoing call) in the application.
            </summary>
            <param name="dependencyTypeName">Name of the command initiated with this dependency call. Low cardinality value.
            Examples are SQL, Azure table, and HTTP.</param>
            <param name="target">External dependency target.</param>
            <param name="dependencyName">Name of the command initiated with this dependency call. Low cardinality value.
            Examples are stored procedure name and URL path template.</param>
            <param name="data">Command initiated by this dependency call. Examples are SQL statement and HTTP
            URL's with all query parameters.</param>
            <param name="startTime">The time when the dependency was called.</param>
            <param name="duration">The time taken by the external dependency to handle the call.</param>
            <param name="resultCode">Result code of dependency call execution.</param>
            <param name="success">True if the dependency call was handled successfully.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackEvent(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Logs custom events with extensible named fields.
            </summary>
            <param name="eventName">A name for the event.</param>
            <param name="properties">Named string values you can use to search and classify events.</param>
            <param name="metrics">Measurements associated with this event.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackException(System.Exception,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Logs a system exception.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="properties">Named string values you can use to classify and search for this exception.</param>
            <param name="metrics">Additional values associated with this exception.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClient.TrackTrace(System.String,Microsoft.Bot.Builder.Severity,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Send a trace message.
            </summary>
            <param name="message">Message to display.</param>
            <param name="severityLevel">Trace severaity level <see cref="T:Microsoft.Bot.Builder.Severity"/>.</param>
            <param name="properties">Named string values you can use to search and classify events.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.IBotTelemetryClient.Flush">
            <summary>
            Flushes the in-memory buffer and any metrics being pre-aggregated.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.NextDelegate">
            <summary>
            Encapsulates an asynchronous method that calls the next
            <see cref="T:Microsoft.Bot.Builder.IMiddleware"/>.<see cref="M:Microsoft.Bot.Builder.IMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)"/>
            or <see cref="T:Microsoft.Bot.Builder.IBot"/>.<see cref="M:Microsoft.Bot.Builder.IBot.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/> method in the middleware pipeline.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IMiddleware">
            <summary>
            Represents middleware that can operate on incoming activities.
            </summary>
            <remarks>A <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> passes incoming activities from the user's
            channel to the middleware's <see cref="M:Microsoft.Bot.Builder.IMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)"/>
            method.
            <para>You can add middleware objects to your adapter’s middleware collection. The
            adapter processes and directs incoming activities in through the bot middleware
            pipeline to your bot’s logic and then back out again. As each activity flows in
            and out of the bot, each piece of middleware can inspect or act upon the activity,
            both before and after the bot logic runs.</para>
            <para>For each activity, the adapter calls middleware in the order in which you
            added it.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.IMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            When implemented in middleware, processess an incoming activity.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="next">The delegate to call to continue the bot middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Middleware calls the <paramref name="next"/> delegate to pass control to
            the next middleware in the pipeline. If middleware doesn’t call the next delegate,
            the adapter does not call any of the subsequent middleware’s request handlers or the
            bot’s receive handler, and the pipeline short circuits.
            <para>The <paramref name="turnContext"/> provides information about the
            incoming activity, and other data needed to process the activity.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.Integration.BotFrameworkOptions">
            <summary>
            Contains settings used by the .NET integration APIs to initialize the <see cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter"/>
            that processes the HTTP requests coming from the Bot Framework Service.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Integration.BotFrameworkOptions"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.CredentialProvider">
            <summary>
            Gets or sets an <see cref="T:Microsoft.Bot.Connector.Authentication.ICredentialProvider"/> that should be used to store and retrieve the
            credentials used during authentication with the Bot Framework Service.
            </summary>
            <value>The credential provider.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.ChannelProvider">
            <summary>
            Gets or sets an <see cref="T:Microsoft.Bot.Connector.Authentication.IChannelProvider"/> that should be used to provide configuration for
            how to validate authentication tokens received from the Bot Framework Service.
            </summary>
            <value>The credential provider.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.OnTurnError">
            <summary>
            Gets or sets an error handler to use to catche exceptions in the middleware or application.
            </summary>
            <value>The error handler.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.Middleware">
            <summary>
            Gets a list of the <see cref="T:Microsoft.Bot.Builder.IMiddleware"/> to use on each incoming activity.
            </summary>
            <value>The middleware list.</value>
            <seealso cref="M:Microsoft.Bot.Builder.BotAdapter.Use(Microsoft.Bot.Builder.IMiddleware)"/>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.State">
            <summary>
            OBSOLETE: This property is no longer used by the framework.
            </summary>
            <remarks>
            This property was used in a pattern to propagate <see cref="T:Microsoft.Bot.Builder.BotState"/> instances
            throughout the service configuration phase, but it was never used at runtime and is
            being retired to reduce the surface area of state APIs. As an alternative, consider
            simply using an appropriately scoped <see cref="T:Microsoft.Bot.Builder.BotState"/> variable along with closures.
            </remarks>
            <value>The list of property state providers.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.ConnectorClientRetryPolicy">
            <summary>
            Gets or sets the retry policy to use in case of errors from Bot Framework Service.
            </summary>
            <value>The retry policy.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.HttpClient">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.HttpClient"/> instance that should be used to make requests to the Bot Framework Service.
            </summary>
            <value>The HTTP client.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkOptions.Paths">
            <summary>
            Gets or sets what paths should be used when exposing the various bot endpoints.
            </summary>
            <value>The path strings.</value>
            <seealso cref="T:Microsoft.Bot.Builder.Integration.BotFrameworkPaths"/>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkPaths.BasePath">
            <summary>
            Gets or sets the base path at which the bot's endpoints should be exposed.
            </summary>
            <value>
            A string that represents the base URL at which the bot should be exposed.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Integration.BotFrameworkPaths.MessagesPath">
            <summary>
            Gets or sets the path, relative to the <see cref="P:Microsoft.Bot.Builder.Integration.BotFrameworkPaths.BasePath"/>, at which the bot framework messages are expected to be delivered.
            </summary>
            <value>
            A string that represents the URL at which the bot framework messages are expected to be delivered.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.Integration.IAdapterIntegration">
            <summary>
            An interface that defines the contract between web service integration pieces and the bot adapter.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.IAdapterIntegration.ProcessActivityAsync(System.String,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Creates a turn context and runs the middleware pipeline for an incoming activity.
            </summary>
            <param name="authHeader">The HTTP authentication header of the request.</param>
            <param name="activity">The incoming activity.</param>
            <param name="callback">The code to run at the end of the adapter's middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute. If the activity type
            was 'Invoke' and the corresponding key (channelId + activityId) was found
            then an InvokeResponse is returned, otherwise null is returned.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IntentScore">
            <summary>
            Score plus any extra information about an intent.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.IntentScore.Score">
            <summary>
            Gets or sets confidence in an intent.
            </summary>
            <value>
            Confidence in an intent.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.IntentScore.Properties">
            <summary>
            Gets or sets any extra properties to include in the results.
            </summary>
            <value>
            Any extra properties to include in the results.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.InvokeResponse">
            <summary>
            Tuple class containing an HTTP Status Code and a JSON Serializable
            object. The HTTP Status code is, in the invoke activity scenario, what will
            be set in the resulting POST. The Body of the resulting POST will be
            the JSON Serialized content from the Body property.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.InvokeResponse.Status">
            <summary>Gets or sets the HTTP status code for the response.</summary>
            <value>The HTTP status code.</value>
            <remarks>
            The POST that is generated in response to the incoming Invoke Activity
            will have the HTTP Status code specificied by this field.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.InvokeResponse.Body">
            <summary>Gets or sets the body content for the response.</summary>
            <value>The body content.</value>
            <remarks>
            The POST that is generated in response to the incoming Invoke Activity
            will have a body generated by JSON serializing the object in this field.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.IPropertyManager">
            <summary>
            IPropertyManager defines implementation of a source of named properties.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IPropertyManager.CreateProperty``1(System.String)">
            <summary>
            Create a managed state property accessor for named property.
            </summary>
            <typeparam name="T">type of object</typeparam>
            <param name="name">name of the object</param>
            <returns>property accessor for accessing the object of type T.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IRecognizer">
            <summary>
            Interface for Recognizers.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IRecognizer.RecognizeAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Runs an utterance through a recognizer and returns a generic recognizer result.
            </summary>
            <param name="turnContext">Turn context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Analysis of utterance.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IRecognizer.RecognizeAsync``1(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Runs an utterance through a recognizer and returns a strongly-typed recognizer result.
            </summary>
            <typeparam name="T">The recognition result type.</typeparam>
            <param name="turnContext">Turn context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Analysis of utterance.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IRecognizerConvert">
            <summary>
            Can convert from a generic recognizer result to a strongly typed one.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IRecognizerConvert.Convert(System.Object)">
            <summary>
            Convert recognizer result.
            </summary>
            <param name="result">Result to convert.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1">
            <summary>
            Interface which defines methods for how you can get data from a property source such as BotState.
            </summary>
            <typeparam name="T">type of the property.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.IStatePropertyAccessor`1.GetAsync(Microsoft.Bot.Builder.ITurnContext,System.Func{`0},System.Threading.CancellationToken)">
            <summary>
            Get the property value from the source.
            If the property is not set, and no default value was defined, a <see cref="T:System.MissingMemberException"/> is thrown.
            </summary>
            <param name="turnContext">Turn Context.</param>
            <param name="defaultValueFactory">Function which defines the property value to be returned if no value has been set.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IStatePropertyAccessor`1.DeleteAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Delete the property from the source.
            </summary>
            <param name="turnContext">Turn Context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.IStatePropertyAccessor`1.SetAsync(Microsoft.Bot.Builder.ITurnContext,`0,System.Threading.CancellationToken)">
            <summary>
            Set the property value on the source.
            </summary>
            <param name="turnContext">Turn Context.</param>
            <param name="value">The value to set.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.IStatePropertyInfo">
            <summary>
            This is metadata about the property including policy info.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.IStatePropertyInfo.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.IStorage">
            <summary>
            Defines the interface for a storage layer.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.IStorage.ReadAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Reads storage items from storage.
            </summary>
            <param name="keys">keys of the <see cref="T:Microsoft.Bot.Builder.IStoreItem"/> objects to read.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            the items read, indexed by key.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.IStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.IStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.IStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Writes storage items to storage.
            </summary>
            <param name="changes">The items to write, indexed by key.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="M:Microsoft.Bot.Builder.IStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.IStorage.ReadAsync(System.String[],System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.IStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Deletes storage items from storage.
            </summary>
            <param name="keys">keys of the <see cref="T:Microsoft.Bot.Builder.IStoreItem"/> objects to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="M:Microsoft.Bot.Builder.IStorage.ReadAsync(System.String[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.IStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.IStoreItem">
            <summary>
            Exposes an ETag for concurrency control.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.IStoreItem.ETag">
            <summary>
            Gets or sets the ETag for concurrency control.
            </summary>
            <value>The concurrency control ETag.</value>
        </member>
        <member name="T:Microsoft.Bot.Builder.StorageExtensions">
            <summary>
            Contains extension methods for <see cref="T:Microsoft.Bot.Builder.IStorage"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.StorageExtensions.ReadAsync``1(Microsoft.Bot.Builder.IStorage,System.String[],System.Threading.CancellationToken)">
            <summary>
            Gets and strongly types a collection of <see cref="T:Microsoft.Bot.Builder.IStoreItem"/> objects from state storage.
            </summary>
            <typeparam name="TStoreItem">The type of item to get from storage.</typeparam>
            <param name="storage">The state storage.</param>
            <param name="keys">The collection of keys for the objects to get from storage.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains a dictionary of the
            strongly typed objects, indexed by the <paramref name="keys"/>.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.ITranscriptLogger">
            <summary>
            Transcript logger stores activities for conversations for recall.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITranscriptLogger.LogActivityAsync(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Log an activity to the transcript.
            </summary>
            <param name="activity">The activity to transcribe.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.ITranscriptStore">
            <summary>
            Represents a store for recording conversations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITranscriptStore.GetTranscriptActivitiesAsync(System.String,System.String,System.String,System.DateTimeOffset)">
            <summary>
            Gets from the store activities that match a set of criteria.
            </summary>
            <param name="channelId">The ID of the channel the conversation is in.</param>
            <param name="conversationId">The ID of the conversation.</param>
            <param name="continuationToken">The continuation token (if available).</param>
            <param name="startDate">A cutoff date. Activities older than this date are not included.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the matching activities.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITranscriptStore.ListTranscriptsAsync(System.String,System.String)">
            <summary>
            Gets the conversations on a channel from the store.
            </summary>
            <param name="channelId">The ID of the channel.</param>
            <param name="continuationToken">Continuation token (if available).</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>List all transcripts for given ChannelID.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITranscriptStore.DeleteTranscriptAsync(System.String,System.String)">
            <summary>
            Deletes conversation data from the store.
            </summary>
            <param name="channelId">The ID of the channel the conversation is in.</param>
            <param name="conversationId">The ID of the conversation to delete.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.SendActivitiesHandler">
            <summary>
            A method that can participate in send activity events for the current turn.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activities">The activities to send.</param>
            <param name="next">The delegate to call to continue event processing.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>A handler calls the <paramref name="next"/> delegate to pass control to
            the next registered handler. If a handler doesn’t call the next delegate,
            the adapter does not call any of the subsequent handlers and does not send the
            <paramref name="activities"/>.
            <para>If the activities are successfully sent, the <paramref name="next"/> delegate returns
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities. Use this array as the return value of this handler.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.BotAdapter"/>
            <seealso cref="T:Microsoft.Bot.Builder.UpdateActivityHandler"/>
            <seealso cref="T:Microsoft.Bot.Builder.DeleteActivityHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.UpdateActivityHandler">
            <summary>
            A method that can participate in update activity events for the current turn.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="activity">The replacement activity.</param>
            <param name="next">The delegate to call to continue event processing.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>A handler calls the <paramref name="next"/> delegate to pass control to
            the next registered handler. If a handler doesn’t call the next delegate,
            the adapter does not call any of the subsequent handlers and does not update the
            activity.
            <para>The activity's <see cref="P:Microsoft.Bot.Schema.IActivity.Id"/> indicates the activity in the
            conversation to replace.</para>
            <para>If the activity is successfully sent, the <paramref name="next"/> delegater returns
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity. Use this response object as the return value of this handler.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.BotAdapter"/>
            <seealso cref="T:Microsoft.Bot.Builder.SendActivitiesHandler"/>
            <seealso cref="T:Microsoft.Bot.Builder.DeleteActivityHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.DeleteActivityHandler">
            <summary>
            A method that can participate in delete activity events for the current turn.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="reference">The conversation containing the activity.</param>
            <param name="next">The delegate to call to continue event processing.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>A handler calls the <paramref name="next"/> delegate to pass control to
            the next registered handler. If a handler doesn’t call the next delegate,
            the adapter does not call any of the subsequent handlers and does not delete the
            activity.
            <para>The conversation reference's <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/>
            indicates the activity in the conversation to replace.</para>
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.BotAdapter"/>
            <seealso cref="T:Microsoft.Bot.Builder.SendActivitiesHandler"/>
            <seealso cref="T:Microsoft.Bot.Builder.UpdateActivityHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.ITurnContext">
            <summary>
            Provides context for a turn of a bot.
            </summary>
            <remarks>Context provides information needed to process an incoming activity.
            The context object is created by a <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> and persists for the
            length of the turn.</remarks>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
            <seealso cref="T:Microsoft.Bot.Builder.IMiddleware"/>
        </member>
        <member name="P:Microsoft.Bot.Builder.ITurnContext.Adapter">
            <summary>
            Gets the bot adapter that created this context object.
            </summary>
            <value>The bot adapter that created this context object.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.ITurnContext.TurnState">
            <summary>
            Collection of values cached with the context object for the lifetime of the turn.
            </summary>
            <value>The collection of services registered on this context object.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.ITurnContext.Activity">
            <summary>
            Gets the incoming request.
            </summary>
            <value>The incoming request.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.ITurnContext.Responded">
            <summary>
            Gets a value indicating whether at least one response was sent for the current turn.
            </summary>
            <value><c>true</c> if at least one response was sent for the current turn; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a message activity to the sender of the incoming activity.
            </summary>
            <param name="textReplyToSend">The text of the message to send.</param>
            <param name="speak">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            One of: "acceptingInput", "ignoringInput", or "expectingInput".
            Default is "acceptingInput".</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>See the channel's documentation for limits imposed upon the contents of
            <paramref name="textReplyToSend"/>.</para>
            <para>To control various characteristics of your bot's speech such as voice,
            rate, volume, pronunciation, and pitch, specify <paramref name="speak"/> in
            Speech Synthesis Markup Language (SSML) format.</para>
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)">
            <summary>
            Sends an activity to the sender of the incoming activity.
            </summary>
            <param name="activity">The activity to send.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)">
            <summary>
            Sends a set of activities to the sender of the incoming activity.
            </summary>
            <param name="activities">The activities to send.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)">
            <summary>
            Replaces an existing activity.
            </summary>
            <param name="activity">New replacement activity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>Before calling this, set the ID of the replacement activity to the ID
            of the activity to replace.</para>
            <para>Not all channels support this operation. Channels that don't, may throw an exception.</para></remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity.
            </summary>
            <param name="activityId">The ID of the activity to delete.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Not all channels support this operation. Channels that don't, may throw an exception.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity.
            </summary>
            <param name="conversationReference">The conversation containing the activity to delete.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>The conversation reference's <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/>
            indicates the activity in the conversation to delete.
            <para>Not all channels support this operation. Channels that don't, may throw an exception.</para></remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)">
            <summary>
            Adds a response handler for send activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            or <see cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/> methods are called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/>
            <seealso cref="T:Microsoft.Bot.Builder.SendActivitiesHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)">
            <summary>
            Adds a response handler for update activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/> is called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            <seealso cref="T:Microsoft.Bot.Builder.UpdateActivityHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.ITurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)">
            <summary>
            Adds a response handler for delete activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(System.String,System.Threading.CancellationToken)"/> is called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.DeleteActivityAsync(System.String,System.Threading.CancellationToken)"/>
            <seealso cref="T:Microsoft.Bot.Builder.DeleteActivityHandler"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)"/>
            <seealso cref="M:Microsoft.Bot.Builder.ITurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.TraceExtensions.ITurnContextExtensions">
            <summary>
            Contains methods for woring with <see cref="T:Microsoft.Bot.Builder.ITurnContext"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.TraceExtensions.ITurnContextExtensions.TraceActivityAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Object,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a trace activity to the <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> for logging purposes.
            </summary>
            <param name="turnContext">The context for the current turn.</param>
            <param name="name">The value to assign to the activity's <see cref="P:Microsoft.Bot.Schema.Activity.Name"/> property.</param>
            <param name="value">The value to assign to the activity's <see cref="P:Microsoft.Bot.Schema.Activity.Value"/> property.</param>
            <param name="valueType">The value to assign to the activity's <see cref="P:Microsoft.Bot.Schema.Activity.ValueType"/> property.</param>
            <param name="label">The value to assign to the activity's <see cref="P:Microsoft.Bot.Schema.Activity.Label"/> property.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the adapter is being hosted in the Emulator, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object with the original trace activity's ID; otherwise,
            it containsa <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.MemoryStorage">
            <summary>
            A storage layer that uses an in-memory dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryStorage.#ctor(System.Collections.Generic.Dictionary{System.String,Newtonsoft.Json.Linq.JObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.MemoryStorage"/> class.
            </summary>
            <param name="dictionary">A pre-existing dictionary to use; or null to use a new one.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Deletes storage items from storage.
            </summary>
            <param name="keys">keys of the <see cref="T:Microsoft.Bot.Builder.IStoreItem"/> objects to delete.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="M:Microsoft.Bot.Builder.MemoryStorage.ReadAsync(System.String[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.MemoryStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryStorage.ReadAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Reads storage items from storage.
            </summary>
            <param name="keys">keys of the <see cref="T:Microsoft.Bot.Builder.IStoreItem"/> objects to read.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            the items read, indexed by key.</remarks>
            <seealso cref="M:Microsoft.Bot.Builder.MemoryStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.MemoryStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryStorage.WriteAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Writes storage items to storage.
            </summary>
            <param name="changes">The items to write, indexed by key.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="M:Microsoft.Bot.Builder.MemoryStorage.DeleteAsync(System.String[],System.Threading.CancellationToken)"/>
            <seealso cref="M:Microsoft.Bot.Builder.MemoryStorage.ReadAsync(System.String[],System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.MemoryTranscriptStore">
            <summary>
            The memory transcript store stores transcripts in volatile memory in a Dictionary.
            </summary>
            <remarks>
            Because this uses an unbounded volitile dictionary this should only be used for unit tests or non-production environments.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryTranscriptStore.LogActivityAsync(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Logs an activity to the transcript.
            </summary>
            <param name="activity">The activity to log.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryTranscriptStore.GetTranscriptActivitiesAsync(System.String,System.String,System.String,System.DateTimeOffset)">
            <summary>
            Gets from the store activities that match a set of criteria.
            </summary>
            <param name="channelId">The ID of the channel the conversation is in.</param>
            <param name="conversationId">The ID of the conversation.</param>
            <param name="continuationToken"></param>
            <param name="startDate">A cutoff date. Activities older than this date are not included.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the matching activities.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryTranscriptStore.DeleteTranscriptAsync(System.String,System.String)">
            <summary>
            Deletes conversation data from the store.
            </summary>
            <param name="channelId">The ID of the channel the conversation is in.</param>
            <param name="conversationId">The ID of the conversation to delete.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.MemoryTranscriptStore.ListTranscriptsAsync(System.String,System.String)">
            <summary>
            Gets the conversations on a channel from the store.
            </summary>
            <param name="channelId">The ID of the channel.</param>
            <param name="continuationToken"></param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.MessageFactory">
            <summary>
            Contains utility methods for various message types a bot can return.
            </summary>
            <example>
            <code>
            // Create and send a message.
            var message = MessageFactory.Text("Hello World");
            await context.SendActivity(message);
            </code>
            </example>
            <remarks>The following apply to message actions in general.
            <para>See the channel's documentation for limits imposed upon the contents of
            the text of the message to send.</para>
            <para>To control various characteristics of your bot's speech such as voice,
            rate, volume, pronunciation, and pitch, specify test to speak in
            Speech Synthesis Markup Language (SSML) format.</para>
            <para>
            Channels decide how each card action manifests in their user experience.
            In most cases, the cards are clickable. In others, they may be selected by speech
            input. In cases where the channel does not offer an interactive activation
            experience (e.g., when interacting over SMS), the channel may not support
            activation whatsoever. The decision about how to render actions is controlled by
            normative requirements elsewhere in this document (e.g. within the card format,
            or within the suggested actions definition).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.Text(System.String,System.String,System.String)">
            <summary>
            Returns a simple text message.
            </summary>
            <example>
            <code>
            // Create and send a message.
            var message = MessageFactory.Text("Hello World");
            await context.SendActivity(message);
            </code>
            </example>
            <param name="text">The text of the message to send.</param>
            <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            One of: "acceptingInput", "ignoringInput", or "expectingInput".
            Default is "acceptingInput".</param>
            <returns>A message activity containing the text.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.SuggestedActions(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String)">
             <summary>
             Returns a message that includes a set of suggested actions and optional text.
             </summary>
             <example>
             <code>
             // Create the activity and add suggested actions.
             var activity = MessageFactory.SuggestedActions(
                 new string[] { "red", "green", "blue" },
                 text: "Choose a color");
            
             // Send the activity as a reply to the user.
             await context.SendActivity(activity);
             </code>
             </example>
             <param name="actions">
             The text of the actions to create.
             </param>
             <param name="text">The text of the message to send.</param>
             <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
             channel.</param>
             <param name="inputHint">Optional, indicates whether your bot is accepting,
             expecting, or ignoring user input after the message is delivered to the client.
             One of: "acceptingInput", "ignoringInput", or "expectingInput".
             Default is "acceptingInput".</param>
             <returns>A message activity containing the suggested actions.</returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="actions"/> is <c>null</c>.</exception>
             <remarks>This method creates a suggested action for each string in <paramref name="actions"/>.
             The created action uses the text for the <see cref="P:Microsoft.Bot.Schema.CardAction.Value"/> and
             <see cref="P:Microsoft.Bot.Schema.CardAction.Title"/> and sets the <see cref="P:Microsoft.Bot.Schema.CardAction.Type"/> to
             <see cref="F:Microsoft.Bot.Schema.ActionTypes.ImBack"/>.
             </remarks>
             <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.SuggestedActions(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.CardAction},System.String,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.SuggestedActions(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.CardAction},System.String,System.String,System.String)">
             <summary>
             Returns a message that includes a set of suggested actions and optional text.
             </summary>
             <example>
             <code>
             // Create the activity and add suggested actions.
             var activity = MessageFactory.SuggestedActions(
                 new CardAction[]
                 {
                     new CardAction(title: "red", type: ActionTypes.ImBack, value: "red"),
                     new CardAction( title: "green", type: ActionTypes.ImBack, value: "green"),
                     new CardAction(title: "blue", type: ActionTypes.ImBack, value: "blue")
                 }, text: "Choose a color");
            
             // Send the activity as a reply to the user.
             await context.SendActivity(activity);
             </code>
             </example>
             <param name="cardActions">
             The card actions to include.
             </param>
             <param name="text">Optional, the text of the message to send.</param>
             <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
             channel.</param>
             <param name="inputHint">Optional, indicates whether your bot is accepting,
             expecting, or ignoring user input after the message is delivered to the client.
             One of: "acceptingInput", "ignoringInput", or "expectingInput".
             Default is "acceptingInput".</param>
             <returns>A message activity that contains the suggested actions.</returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="cardActions"/> is <c>null</c>.</exception>
             <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.SuggestedActions(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.Attachment(Microsoft.Bot.Schema.Attachment,System.String,System.String,System.String)">
            <summary>
            Returns a message activity that contains an attachment.
            </summary>
            <param name="attachment">Attachment to include in the message.</param>
            <param name="text">Optional, the text of the message to send.</param>
            <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            One of: "acceptingInput", "ignoringInput", or "expectingInput".
            Default is "acceptingInput".</param>
            <returns>A message activity containing the attachment.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="attachment"/> is <c>null</c>.</exception>
            <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.Attachment(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Attachment},System.String,System.String,System.String)"/>
            <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.Carousel(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Attachment},System.String,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.Attachment(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Attachment},System.String,System.String,System.String)">
            <summary>
            Returns a message activity that contains a collection of attachments, in a list.
            </summary>
            <param name="attachments">The attachments to include in the message.</param>
            <param name="text">Optional, the text of the message to send.</param>
            <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            One of: "acceptingInput", "ignoringInput", or "expectingInput".
            Default is "acceptingInput".</param>
            <returns>A message activity containing the attachment.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="attachments"/> is <c>null</c>.</exception>
            <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.Carousel(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Attachment},System.String,System.String,System.String)"/>
            <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.Attachment(Microsoft.Bot.Schema.Attachment,System.String,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.Carousel(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Attachment},System.String,System.String,System.String)">
             <summary>
             Returns a message activity that contains a collection of attachments, as a carousel.
             </summary>
             <param name="attachments">The attachments to include in the message.</param>
             <param name="text">Optional, the text of the message to send.</param>
             <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
             channel.</param>
             <param name="inputHint">Optional, indicates whether your bot is accepting,
             expecting, or ignoring user input after the message is delivered to the client.
             One of: "acceptingInput", "ignoringInput", or "expectingInput".
             Default is "acceptingInput".</param>
             <returns>A message activity containing the attachment.</returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="attachments"/> is <c>null</c>.</exception>
             <example>This code creates and sends a carousel of HeroCards.
             <code>
             // Create the activity and attach a set of Hero cards.
             var activity = MessageFactory.Carousel(
             new Attachment[]
             {
                 new HeroCard(
                     title: "title1",
                     images: new CardImage[] { new CardImage(url: "imageUrl1.png") },
                     buttons: new CardAction[]
                     {
                         new CardAction(title: "button1", type: ActionTypes.ImBack, value: "item1")
                     })
                 .ToAttachment(),
                 new HeroCard(
                     title: "title2",
                     images: new CardImage[] { new CardImage(url: "imageUrl2.png") },
                     buttons: new CardAction[]
                     {
                         new CardAction(title: "button2", type: ActionTypes.ImBack, value: "item2")
                     })
                 .ToAttachment(),
                 new HeroCard(
                     title: "title3",
                     images: new CardImage[] { new CardImage(url: "imageUrl3.png") },
                     buttons: new CardAction[]
                     {
                         new CardAction(title: "button3", type: ActionTypes.ImBack, value: "item3")
                     })
                 .ToAttachment()
             });
            
             // Send the activity as a reply to the user.
             await context.SendActivity(activity);
             </code>
             </example>
             <seealso cref="M:Microsoft.Bot.Builder.MessageFactory.Attachment(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.Attachment},System.String,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MessageFactory.ContentUrl(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a message activity that contains a single image or video.
            </summary>
            <param name="url">The URL of the image or video to send.</param>
            <param name="contentType">The MIME type of the image or video.</param>
            <param name="name">Optional, the name of the image or video file.</param>
            <param name="text">Optional, the text of the message to send.</param>
            <param name="ssml">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            One of: "acceptingInput", "ignoringInput", or "expectingInput".
            Default is null.</param>
            <returns>A message activity containing the attachment.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> or <paramref name="contentType"/> is <c>null</c>,
            empty, or white space.</exception>
            <example>This code creates a message activity that contains an image.
            <code>
            IMessageActivity message =
                MessageFactory.ContentUrl("https://{domainName}/cat.jpg", MediaTypeNames.Image.Jpeg, "Cat Picture");
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Bot.Builder.MiddlewareSet">
            <summary>
            Contains an ordered set of <see cref="T:Microsoft.Bot.Builder.IMiddleware"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.MiddlewareSet.Use(Microsoft.Bot.Builder.IMiddleware)">
            <summary>
            Adds a middleware object to the end of the set.
            </summary>
            <param name="middleware">The middleware to add.</param>
            <returns>The updated middleware set.</returns>
            <see cref="M:Microsoft.Bot.Builder.BotAdapter.Use(Microsoft.Bot.Builder.IMiddleware)"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.MiddlewareSet.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Processes an incoming activity.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="next">The delegate to call to continue the bot middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.MiddlewareSet.ReceiveActivityWithStatusAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)">
            <summary>
            Processes an activity.
            </summary>
            <param name="turnContext">The context object for the turn.</param>
            <param name="callback">The delegate to call when the set finishes processing the activity.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.PagedResult`1">
            <summary>
            Page of results from an enumeration.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.Bot.Builder.PagedResult`1.Items">
            <summary>
            Page of items.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.PagedResult`1.ContinuationToken">
            <summary>
            Token used to page through multiple pages.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.PrivateConversationState">
            <summary>
            Handles persistence of a conversation state object using the conversation.Id and from.Id part of an activity.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.PrivateConversationState.#ctor(Microsoft.Bot.Builder.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.PrivateConversationState"/> class.
            </summary>
            <param name="storage">The storage provider to use.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.PrivateConversationState.GetStorageKey(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Gets the key to use when reading and writing state to and from storage.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <returns>The storage key.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.RecognizerResult">
            <summary>
            Contains recognition results generated by an <see cref="T:Microsoft.Bot.Builder.IRecognizer"/>.
            </summary>
            <seealso cref="M:Microsoft.Bot.Builder.IRecognizer.RecognizeAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)"/>
        </member>
        <member name="P:Microsoft.Bot.Builder.RecognizerResult.Text">
            <summary>
            Gets or sets the input text to recognize.
            </summary>
            <value>
            Original text to recognizer.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.RecognizerResult.AlteredText">
            <summary>
            Gets or sets the input text as modified by the recognizer, for example for spelling correction.
            </summary>
            <value>
            Text modified by recognizer.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.RecognizerResult.Intents">
            <summary>
            Gets or sets the recognized intents, with the intent as key and the confidence as value.
            </summary>
            <value>
            Mapping from intent to information about the intent.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.RecognizerResult.Entities">
            <summary>
            Gets or sets the recognized top-level entities.
            </summary>
            <value>
            Object with each top-level recognized entity as a key.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.RecognizerResult.Properties">
            <summary>
            Gets or sets properties that are not otherwise defined by the <see cref="T:Microsoft.Bot.Builder.RecognizerResult"/> type but that
            might appear in the REST JSON object.
            </summary>
            <value>The extended properties for the object.</value>
            <remarks>With this, properties not represented in the defined type are not dropped when
            the JSON object is deserialized, but are instead stored in this property. Such properties
            will be written to a JSON object when the instance is serialized.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.RecognizerResult.Convert(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Bot.Builder.RecognizerResultExtensions">
            <summary>
            Contains helper methods for working with <see cref="T:Microsoft.Bot.Builder.RecognizerResult"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.RecognizerResultExtensions.GetTopScoringIntent(Microsoft.Bot.Builder.RecognizerResult)">
            <summary>
            Return the top scoring intent and its score.
            </summary>
            <param name="result">Recognizer result.</param>
            <returns>Intent and score.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Severity">
            <summary>
            This enumeration is used by TrackTrace to identify severity level.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Severity.Verbose">
            <summary>
            Verbose severity level.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Severity.Information">
            <summary>
            Information severity level.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Severity.Warning">
            <summary>
            Warning severity level.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Severity.Error">
            <summary>
            Error severity level.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Severity.Critical">
            <summary>
            Critical severity level.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.ShowTypingMiddleware">
            <summary>
            When added, this middleware will send typing activities back to the user when a Message activity
            is receieved to let them know that the bot has receieved the message and is working on the response.
            You can specify a delay in milliseconds before the first typing activity is sent and then a frequency,
            also in milliseconds which determines how often another typing activity is sent. Typing activities
            will continue to be sent until your bot sends another message back to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.ShowTypingMiddleware.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.ShowTypingMiddleware"/> class.
            </summary>
            <param name="delay">Initial delay before sending first typing indicator. Defaults to 500ms.</param>
            <param name="period">Rate at which additional typing indicators will be sent. Defaults to every 2000ms.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.ShowTypingMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Processess an incoming activity.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="next">The delegate to call to continue the bot middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Spawns a thread that sends the periodic typing activities until the turn ends.
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.TraceTranscriptLogger">
            <summary>
            Representas a transcript logger that writes activites to a <see cref="T:System.Diagnostics.Trace"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.TraceTranscriptLogger.LogActivityAsync(Microsoft.Bot.Schema.IActivity)">
            <summary>
            Log an activity to the transcript.
            </summary>
            <param name="activity">The activity to transcribe.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.TranscriptInfo">
            <summary>
            Represents a copy of a conversation.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.TranscriptInfo.ChannelId">
            <summary>
            Gets or sets the ID of the channel in which the conversation occurred.
            </summary>
            <value>The ID of the channel in which the conversation occurred.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.TranscriptInfo.Id">
            <summary>
            Gets or sets the ID of the conversation.
            </summary>
            <value>The ID of the conversation.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.TranscriptInfo.Created">
            <summary>
            Gets or sets the date the conversation began.
            </summary>
            <value>The date then conversation began.</value>
        </member>
        <member name="T:Microsoft.Bot.Builder.TranscriptLoggerMiddleware">
            <summary>
            Middleware for logging incoming and outgoing activitites to an <see cref="T:Microsoft.Bot.Builder.ITranscriptStore"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.TranscriptLoggerMiddleware.#ctor(Microsoft.Bot.Builder.ITranscriptLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.TranscriptLoggerMiddleware"/> class.
            </summary>
            <param name="transcriptLogger">The conversation store to use.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.TranscriptLoggerMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)">
            <summary>
            Records incoming and outgoing activities to the conversation store.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <param name="nextTurn">The delegate to call to continue the bot middleware pipeline.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <seealso cref="T:Microsoft.Bot.Builder.ITurnContext"/>
            <seealso cref="T:Microsoft.Bot.Schema.IActivity"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.TurnContext">
            <summary>
            Provides context for a turn of a bot.
            </summary>
            <remarks>Context provides information needed to process an incoming activity.
            The context object is created by a <see cref="T:Microsoft.Bot.Builder.BotAdapter"/> and persists for the
            length of the turn.</remarks>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
            <seealso cref="T:Microsoft.Bot.Builder.IMiddleware"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.#ctor(Microsoft.Bot.Builder.BotAdapter,Microsoft.Bot.Schema.Activity)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.TurnContext"/> class.
            </summary>
            <param name="adapter">The adapter creating the context.</param>
            <param name="activity">The incoming activity for the turn;
            or <c>null</c> for a turn for a proactive message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="activity"/> or
            <paramref name="adapter"/> is <c>null</c>.</exception>
            <remarks>For use by bot adapter implementations only.</remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.TurnContext.Adapter">
            <summary>
            Gets the bot adapter that created this context object.
            </summary>
            <value>The bot adapter that created this context object.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.TurnContext.TurnState">
            <summary>
            Gets the services registered on this context object.
            </summary>
            <value>The services registered on this context object.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.TurnContext.Activity">
            <summary>
            Gets the activity associated with this turn; or <c>null</c> when processing
            a proactive message.
            </summary>
            <value>The activity associated with this turn.</value>
        </member>
        <member name="P:Microsoft.Bot.Builder.TurnContext.Responded">
            <summary>
            Gets a value indicating whether at least one response was sent for the current turn.
            </summary>
            <value><c>true</c> if at least one response was sent for the current turn.</value>
            <remarks><see cref="T:Microsoft.Bot.Schema.ITraceActivity"/> activities on their own do not set this flag.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.OnSendActivities(Microsoft.Bot.Builder.SendActivitiesHandler)">
            <summary>
            Adds a response handler for send activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.TurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/>
            or <see cref="M:Microsoft.Bot.Builder.TurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)"/> methods are called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.OnUpdateActivity(Microsoft.Bot.Builder.UpdateActivityHandler)">
            <summary>
            Adds a response handler for update activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.TurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)"/> is called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.OnDeleteActivity(Microsoft.Bot.Builder.DeleteActivityHandler)">
            <summary>
            Adds a response handler for delete activity operations.
            </summary>
            <param name="handler">The handler to add to the context object.</param>
            <returns>The updated context object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <remarks>When the context's <see cref="M:Microsoft.Bot.Builder.TurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)"/>
            or <see cref="M:Microsoft.Bot.Builder.TurnContext.DeleteActivityAsync(System.String,System.Threading.CancellationToken)"/> is called,
            the adapter calls the registered handlers in the order in which they were
            added to the context object.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.SendActivityAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a message activity to the sender of the incoming activity.
            </summary>
            <param name="textReplyToSend">The text of the message to send.</param>
            <param name="speak">Optional, text to be spoken by your bot on a speech-enabled
            channel.</param>
            <param name="inputHint">Optional, indicates whether your bot is accepting,
            expecting, or ignoring user input after the message is delivered to the client.
            One of: "acceptingInput", "ignoringInput", or "expectingInput".
            Default is null.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="textReplyToSend"/> is <c>null</c> or whitespace.</exception>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>See the channel's documentation for limits imposed upon the contents of
            <paramref name="textReplyToSend"/>.</para>
            <para>To control various characteristics of your bot's speech such as voice,
            rate, volume, pronunciation, and pitch, specify <paramref name="speak"/> in
            Speech Synthesis Markup Language (SSML) format.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.SendActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)">
            <summary>
            Sends an activity to the sender of the incoming activity.
            </summary>
            <param name="activity">The activity to send.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="activity"/> is <c>null</c>.</exception>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.SendActivitiesAsync(Microsoft.Bot.Schema.IActivity[],System.Threading.CancellationToken)">
            <summary>
            Sends a set of activities to the sender of the incoming activity.
            </summary>
            <param name="activities">The activities to send.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            an array of <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> objects containing the IDs that
            the receiving channel assigned to the activities.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.UpdateActivityAsync(Microsoft.Bot.Schema.IActivity,System.Threading.CancellationToken)">
            <summary>
            Replaces an existing activity.
            </summary>
            <param name="activity">New replacement activity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            The HTTP operation failed and the response contained additional information.</exception>
            <exception cref="T:System.AggregateException">
            One or more exceptions occurred during the operation.</exception>
            <remarks>If the activity is successfully sent, the task result contains
            a <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/> object containing the ID that the receiving
            channel assigned to the activity.
            <para>Before calling this, set the ID of the replacement activity to the ID
            of the activity to replace.</para></remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.DeleteActivityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity.
            </summary>
            <param name="activityId">The ID of the activity to delete.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            The HTTP operation failed and the response contained additional information.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.DeleteActivityAsync(Microsoft.Bot.Schema.ConversationReference,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing activity.
            </summary>
            <param name="conversationReference">The conversation containing the activity to delete.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            The HTTP operation failed and the response contained additional information.</exception>
            <remarks>The conversation reference's <see cref="P:Microsoft.Bot.Schema.ConversationReference.ActivityId"/>
            indicates the activity in the conversation to delete.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContext.Dispose">
            <summary>
            Frees resources.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.TurnContextStateCollection">
            <summary>
            Values persisted for the lifetime of the turn as part of the <see cref="T:Microsoft.Bot.Builder.ITurnContext"/>.
            </summary>
            <remarks>
            TODO: add more details on what kind of values can/should be stored here, by whom and what the lifetime semantics are, etc.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.TurnContextStateCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Get``1(System.String)">
            <summary>
            Gets a cached value by name from the turn's context.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
            <param name="key">The name of the service.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <returns>The service object; or null if no service is registered by the key, or
            the retrieved object does not match the service type.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Get``1">
            <summary>
            Gets the default value by type from the turn's context.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
            <returns>The service object; or null if no default service of the type is registered.</returns>
            <remarks>The default service key is the <see cref="P:System.Type.FullName"/> of the service type.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Add``1(System.String,``0)">
            <summary>
            Adds a value to the turn's context.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
            <param name="key">The name of the service.</param>
            <param name="value">The value to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="value"/>
            is null.</exception>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Add``1(``0)">
            <summary>
            Adds a value to the turn's context.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
            <param name="value">The service object to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <remarks>The default service key is the <see cref="P:System.Type.FullName"/> of the service type.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.TurnContextStateCollection.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Bot.Builder.UserState">
            <summary>
            Handles persistence of a user state object using the user ID as part of the key.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.UserState.#ctor(Microsoft.Bot.Builder.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.UserState"/> class.
            </summary>
            <param name="storage">The storage provider to use.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.UserState.GetStorageKey(Microsoft.Bot.Builder.ITurnContext)">
            <summary>
            Gets the key to use when reading and writing state to and from storage.
            </summary>
            <param name="turnContext">The context object for this turn.</param>
            <returns>The storage key.</returns>
        </member>
    </members>
</doc>
